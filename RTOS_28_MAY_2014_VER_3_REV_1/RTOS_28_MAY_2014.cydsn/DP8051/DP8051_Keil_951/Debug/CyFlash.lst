C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFLASH
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\CyFlash.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\CyFlash.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\CyFlash.lst) CD DB NOIP OT(2
                    -,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\CyFlash.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: CyFlash.c
   3          * Version 4.0
   4          *
   5          *  Description:
   6          *   Provides an API for the FLASH/EEPROM.
   7          *
   8          *  Note:
   9          *   This code is endian agnostic.
  10          *
  11          *  Note:
  12          *   Documentation of the API's in this file is located in the
  13          *   System Reference Guide provided with PSoC Creator.
  14          *
  15          ********************************************************************************
  16          * Copyright 2008-2013, Cypress Semiconductor Corporation. All rights reserved.
  17          * You may use this file only in accordance with the license, terms, conditions,
  18          * disclaimers, and limitations in the end user license agreement accompanying
  19          * the software package with which this file was provided.
  20          *******************************************************************************/
  21          
  22          #include "CyFlash.h"
  23          
  24          
  25          /*******************************************************************************
  26          * Holds die temperature, updated by CySetTemp(). Used for flash writting.
  27          * The first byte is the sign of the temperature (0 = negative, 1 = positive).
  28          * The second byte is the magnitude.
  29          *******************************************************************************/
  30          uint8 dieTemperature[CY_FLASH_DIE_TEMP_DATA_SIZE];
  31          
  32          #if(CYDEV_ECC_ENABLE == 0)
                  static uint8 * rowBuffer = 0;
              #endif  /* (CYDEV_ECC_ENABLE == 0) */
  35          
  36          
  37          static cystatus CySetTempInt(void);
  38          
  39          
  40          /*******************************************************************************
  41          * Function Name: CyFlash_Start
  42          ********************************************************************************
  43          *
  44          * Summary:
  45          *  Enable the Flash.
  46          *
  47          * Parameters:
  48          *  None
  49          *
  50          * Return:
  51          *  None
  52          *
  53          *******************************************************************************/
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 2   

  54          void CyFlash_Start(void) 
  55          {
  56   1          /* Active Power Mode */
  57   1          *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  58   1      
  59   1          /* Standby Power Mode */
  60   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_FLASH_MASK;
  61   1      
  62   1          CyDelayUs(CY_FLASH_EE_STARTUP_DELAY);
  63   1      }
  64          
  65          
  66          /*******************************************************************************
  67          * Function Name: CyFlash_Stop
  68          ********************************************************************************
  69          *
  70          * Summary:
  71          *  Disable the Flash.
  72          *
  73          * Parameters:
  74          *  None
  75          *
  76          * Return:
  77          *  None
  78          *
  79          * Side Effects:
  80          *  This setting is ignored as long as the CPU is currently running.  This will
  81          *  only take effect when the CPU is later disabled.
  82          *
  83          *******************************************************************************/
  84          void CyFlash_Stop(void) 
  85          {
  86   1          /* Active Power Mode */
  87   1          *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
  88   1      
  89   1          /* Standby Power Mode */
  90   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_FLASH_MASK));
  91   1      }
  92          
  93          
  94          /*******************************************************************************
  95          * Function Name: CySetTempInt
  96          ********************************************************************************
  97          *
  98          * Summary:
  99          *  Sends a command to the SPC to read the die temperature. Sets a global value
 100          *  used by the Write functions. This function must be called once before
 101          *  executing a series of Flash writing functions.
 102          *
 103          * Parameters:
 104          *  None
 105          *
 106          * Return:
 107          *  status:
 108          *   CYRET_SUCCESS - if successful
 109          *   CYRET_LOCKED  - if Flash writing already in use
 110          *   CYRET_UNKNOWN - if there was an SPC error
 111          *
 112          *******************************************************************************/
 113          static cystatus CySetTempInt(void) 
 114          {
 115   1          cystatus status;
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 3   

 116   1      
 117   1          /* Make sure SPC is powered */
 118   1          CySpcStart();
 119   1      
 120   1          /* Plan for failure. */
 121   1          status = CYRET_UNKNOWN;
 122   1      
 123   1          if(CySpcLock() == CYRET_SUCCESS)
 124   1          {
 125   2              /* Write the command. */
 126   2              if(CYRET_STARTED == CySpcGetTemp(CY_TEMP_NUMBER_OF_SAMPLES))
 127   2              {
 128   3                  do
 129   3                  {
 130   4                      if(CySpcReadData(dieTemperature, CY_FLASH_DIE_TEMP_DATA_SIZE) == CY_FLASH_DIE_TEMP_DATA_SI
             -ZE)
 131   4                      {
 132   5                          status = CYRET_SUCCESS;
 133   5      
 134   5                          while(CY_SPC_BUSY)
 135   5                          {
 136   6                              /* Spin until idle. */
 137   6                              CyDelayUs(1u);
 138   6                          }
 139   5                          break;
 140   5                      }
 141   4      
 142   4                  } while(CY_SPC_BUSY);
 143   3              }
 144   2      
 145   2              CySpcUnlock();
 146   2          }
 147   1          else
 148   1          {
 149   2              status = CYRET_LOCKED;
 150   2          }
 151   1      
 152   1          return (status);
 153   1      }
 154          
 155          
 156          /*******************************************************************************
 157          * Function Name: CySetTemp
 158          ********************************************************************************
 159          *
 160          * Summary:
 161          *  This is a wraparound for CySetTempInt(). It is used to return second
 162          *  successful read of temperature value.
 163          *
 164          * Parameters:
 165          *  None
 166          *
 167          * Return:
 168          *  status:
 169          *   CYRET_SUCCESS if successful.
 170          *   CYRET_LOCKED  if Flash writing already in use
 171          *   CYRET_UNKNOWN if there was an SPC error.
 172          *
 173          *  uint8 dieTemperature[2]:
 174          *   Holds die temperature for the flash writting algorithm. The first byte is
 175          *   the sign of the temperature (0 = negative, 1 = positive). The second byte is
 176          *   the magnitude.
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 4   

 177          *
 178          *******************************************************************************/
 179          cystatus CySetTemp(void) 
 180          {
 181   1          cystatus status = CySetTempInt();
 182   1      
 183   1          if(status == CYRET_SUCCESS)
 184   1          {
 185   2              status = CySetTempInt();
 186   2          }
 187   1      
 188   1          return (status);
 189   1      }
 190          
 191          
 192          /*******************************************************************************
 193          * Function Name: CySetFlashEEBuffer
 194          ********************************************************************************
 195          *
 196          * Summary:
 197          *  Sets the user supplied temporary buffer to store SPC data while performing
 198          *  flash and EEPROM commands. This buffer is only necessary when Flash ECC is
 199          *  disabled.
 200          *
 201          * Parameters:
 202          *  buffer:
 203          *   Address of block of memory to store temporary memory. The size of the block
 204          *   of memory is CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE.
 205          *
 206          * Return:
 207          *  status:
 208          *   CYRET_SUCCESS if successful.
 209          *   CYRET_BAD_PARAM if the buffer is NULL
 210          *
 211          *******************************************************************************/
 212          cystatus CySetFlashEEBuffer(uint8 * buffer) 
 213          {
 214   1          cystatus status = CYRET_SUCCESS;
 215   1      
 216   1          CySpcStart();
 217   1      
 218   1          #if(CYDEV_ECC_ENABLE == 0)
              
                      if(NULL == buffer)
                      {
                          status = CYRET_BAD_PARAM;
                      }
                      else if(CySpcLock() != CYRET_SUCCESS)
                      {
                          status = CYRET_LOCKED;
                      }
                      else
                      {
                          rowBuffer = buffer;
                          CySpcUnlock();
                      }
              
                  #else
 235   1      
 236   1              /* To supress the warning */
 237   1              buffer = buffer;
 238   1      
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 5   

 239   1          #endif  /* (CYDEV_ECC_ENABLE == 0u) */
 240   1      
 241   1          return(status);
 242   1      }
 243          
 244          
 245          #if(CYDEV_ECC_ENABLE == 1)
 246          
 247              /*******************************************************************************
 248              * Function Name: CyWriteRowData
 249              ********************************************************************************
 250              *
 251              * Summary:
 252              *  Sends a command to the SPC to load and program a row of data in
 253              *  Flash or EEPROM.
 254              *
 255              * Parameters:
 256              *  arrayID:    ID of the array to write.
 257              *   The type of write, Flash or EEPROM, is determined from the array ID.
 258              *   The arrays in the part are sequential starting at the first ID for the
 259              *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
 260              *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
 261              *  rowAddress: rowAddress of flash row to program.
 262              *  rowData:    Array of bytes to write.
 263              *
 264              * Return:
 265              *  status:
 266              *   CYRET_SUCCESS if successful.
 267              *   CYRET_LOCKED if the SPC is already in use.
 268              *   CYRET_CANCELED if command not accepted
 269              *   CYRET_UNKNOWN if there was an SPC error.
 270              *
 271              *******************************************************************************/
 272              cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
 273              {
 274   1              uint16 rowSize;
 275   1              cystatus status;
 276   1      
 277   1              rowSize = (arrayId > CY_SPC_LAST_FLASH_ARRAYID) ? CYDEV_EEPROM_ROW_SIZE : CYDEV_FLS_ROW_SIZE;
 278   1              status = CyWriteRowFull(arrayId, rowAddress, rowData, rowSize);
 279   1      
 280   1              return(status);
 281   1          }
 282          
 283          #else
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowData
                  ********************************************************************************
                  *
                  * Summary:
                  *   Sends a command to the SPC to load and program a row of data in
                  *   Flash or EEPROM.
                  *
                  * Parameters:
                  *  arrayID      : ID of the array to write.
                  *   The type of write, Flash or EEPROM, is determined from the array ID.
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts from 0x00 to
                  *   0x3F and for the EEPROM memory it lasts from 0x40 to 0x7F.
                  *  rowAddress   : rowAddress of flash row to program.
                  *  rowData      : Array of bytes to write.
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 6   

                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowData(uint8 arrayId, uint16 rowAddress, const uint8 * rowData) 
                  {
                      uint8 i;
                      uint32 offset;
                      uint16 rowSize;
                      cystatus status;
              
                      /* Check whether rowBuffer pointer has been initialized by CySetFlashEEBuffer() */
                      if(NULL != rowBuffer)
                      {
                          if(arrayId > CY_SPC_LAST_FLASH_ARRAYID)
                          {
                              rowSize = CYDEV_EEPROM_ROW_SIZE;
                          }
                          else
                          {
                              rowSize = CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZE;
              
                              /* Save the ECC area. */
                              offset = CYDEV_ECC_BASE +
                                      ((uint32)arrayId * CYDEV_ECC_SECTOR_SIZE) +
                                      ((uint32)rowAddress * CYDEV_ECC_ROW_SIZE);
              
                              for(i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
                              {
                                  *(rowBuffer + CYDEV_FLS_ROW_SIZE + i) = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                              }
                          }
              
                          /* Copy the rowdata to the temporary buffer. */
                      #if(CY_PSOC3)
                          (void) memcpy((void *) rowBuffer, (void *)((uint32) rowData), (int16) CYDEV_FLS_ROW_SIZE);
                      #else
                          (void) memcpy((void *) rowBuffer, (const void *) rowData, CYDEV_FLS_ROW_SIZE);
                      #endif  /* (CY_PSOC3) */
              
                          status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, rowSize);
                      }
                      else
                      {
                          status = CYRET_UNKNOWN;
                      }
              
                      return(status);
                  }
              
              #endif /* (CYDEV_ECC_ENABLE == 0u) */
 357          
 358          
 359          #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                  /*******************************************************************************
                  * Function Name: CyWriteRowConfig
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 7   

                  ********************************************************************************
                  *
                  * Summary:
                  *  Sends a command to the SPC to load and program a row of config data in flash.
                  *  This function is only valid for Flash array IDs (not for EEPROM).
                  *
                  * Parameters:
                  *  arrayId:      ID of the array to write
                  *   The arrays in the part are sequential starting at the first ID for the
                  *   specific memory type. The array ID for the Flash memory lasts
                  *   from 0x00 to 0x3F.
                  *  rowAddress:   Address of the sector to erase.
                  *  rowECC:       Array of bytes to write.
                  *
                  * Return:
                  *  status:
                  *   CYRET_SUCCESS if successful.
                  *   CYRET_LOCKED if the SPC is already in use.
                  *   CYRET_CANCELED if command not accepted
                  *   CYRET_UNKNOWN if there was an SPC error.
                  *
                  *******************************************************************************/
                  cystatus CyWriteRowConfig(uint8 arrayId, uint16 rowAddress, const uint8 * rowECC)\
                  
                  {
                      uint32 offset;
                      uint16 i;
                      cystatus status;
              
                      /* Check whether rowBuffer pointer has been initialized by CySetFlashEEBuffer() */
                      if(NULL != rowBuffer)
                      {
                          /* Read the existing flash data. */
                          offset = ((uint32)arrayId * CYDEV_FLS_SECTOR_SIZE) +
                                   ((uint32)rowAddress * CYDEV_FLS_ROW_SIZE);
              
                          #if (CYDEV_FLS_BASE != 0u)
                              offset += CYDEV_FLS_BASE;
                          #endif  /* (CYDEV_FLS_BASE != 0u) */
              
                          for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
                          {
                              rowBuffer[i] = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                          }
              
                          #if(CY_PSOC3)
                              (void) memcpy((void *)&rowBuffer[CYDEV_FLS_ROW_SIZE],
                                            (void *)(uint32)rowECC,
                                            (int16)CYDEV_ECC_ROW_SIZE);
                          #else
                              (void) memcpy((void *)&rowBuffer[CYDEV_FLS_ROW_SIZE],
                                            (const void *)rowECC,
                                            CYDEV_ECC_ROW_SIZE);
                          #endif  /* (CY_PSOC3) */
              
                          status = CyWriteRowFull(arrayId, rowAddress, rowBuffer, CYDEV_FLS_ROW_SIZE + CYDEV_ECC_ROW_SIZ
             -E);
                      }
                      else
                      {
                          status = CYRET_UNKNOWN;
                      }
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 8   

              
                      return (status);
                  }
              
              #endif  /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 429          
 430          
 431          
 432          /*******************************************************************************
 433          * Function Name: CyWriteRowFull
 434          ********************************************************************************
 435          * Summary:
 436          *  Sends a command to the SPC to load and program a row of data in flash.
 437          *  rowData array is expected to contain Flash and ECC data if needed.
 438          *
 439          * Parameters:
 440          *  arrayId:    FLASH or EEPROM array id.
 441          *  rowData:    Pointer to a row of data to write.
 442          *  rowNumber:  Zero based number of the row.
 443          *  rowSize:    Size of the row.
 444          *
 445          * Return:
 446          *  CYRET_SUCCESS if successful.
 447          *  CYRET_LOCKED if the SPC is already in use.
 448          *  CYRET_CANCELED if command not accepted
 449          *  CYRET_UNKNOWN if there was an SPC error.
 450          *
 451          *******************************************************************************/
 452          cystatus CyWriteRowFull(uint8 arrayId, uint16 rowNumber, const uint8* rowData, uint16 rowSize) \
 453                  
 454          {
 455   1          cystatus status;
 456   1      
 457   1          if(CySpcLock() == CYRET_SUCCESS)
 458   1          {
 459   2              /* Load row data into SPC internal latch */
 460   2              status = CySpcLoadRow(arrayId, rowData, rowSize);
 461   2      
 462   2              if(CYRET_STARTED == status)
 463   2              {
 464   3                  while(CY_SPC_BUSY)
 465   3                  {
 466   4                      /* Wait for SPC to finish and get SPC status */
 467   4                      CyDelayUs(1u);
 468   4                  }
 469   3      
 470   3                  /* Hide SPC status */
 471   3                  if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 472   3                  {
 473   4                      status = CYRET_SUCCESS;
 474   4                  }
 475   3                  else
 476   3                  {
 477   4                      status = CYRET_UNKNOWN;
 478   4                  }
 479   3      
 480   3                  if(CYRET_SUCCESS == status)
 481   3                  {
 482   4                      /* Erase and program flash with the data from SPC interval latch */
 483   4                      status = CySpcWriteRow(arrayId, rowNumber, dieTemperature[0u], dieTemperature[1u]);
 484   4      
 485   4                      if(CYRET_STARTED == status)
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 9   

 486   4                      {
 487   5                          while(CY_SPC_BUSY)
 488   5                          {
 489   6                              /* Wait for SPC to finish and get SPC status */
 490   6                              CyDelayUs(1u);
 491   6                          }
 492   5      
 493   5                          /* Hide SPC status */
 494   5                          if(CY_SPC_STATUS_SUCCESS == CY_SPC_READ_STATUS)
 495   5                          {
 496   6                              status = CYRET_SUCCESS;
 497   6                          }
 498   5                          else
 499   5                          {
 500   6                              status = CYRET_UNKNOWN;
 501   6                          }
 502   5                      }
 503   4                  }
 504   3      
 505   3              }
 506   2      
 507   2              CySpcUnlock();
 508   2          }
 509   1          else
 510   1          {
 511   2              status = CYRET_LOCKED;
 512   2          }
 513   1      
 514   1          return(status);
 515   1      }
 516          
 517          
 518          /*******************************************************************************
 519          * Function Name: CyFlash_SetWaitCycles
 520          ********************************************************************************
 521          *
 522          * Summary:
 523          *  Sets the number of clock cycles the cache will wait before it samples data
 524          *  coming back from Flash. This function must be called before increasing CPU
 525          *  clock frequency. It can optionally be called after lowering CPU clock
 526          *  frequency in order to improve CPU performance.
 527          *
 528          * Parameters:
 529          *  uint8 freq:
 530          *   Frequency of operation in Megahertz.
 531          *
 532          * Return:
 533          *  None
 534          *
 535          *******************************************************************************/
 536          void CyFlash_SetWaitCycles(uint8 freq) 
 537          {
 538   1          uint8 interruptState;
 539   1      
 540   1          /* Save current global interrupt enable and disable it */
 541   1          interruptState = CyEnterCriticalSection();
 542   1      
 543   1          /***************************************************************************
 544   1          * The number of clock cycles the cache will wait before it samples data
 545   1          * coming back from Flash must be equal or greater to to the CPU frequency
 546   1          * outlined in clock cycles.
 547   1          ***************************************************************************/
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 10  

 548   1      
 549   1          #if (CY_PSOC3)
 550   1      
 551   1              if (freq <= 22u)
 552   1              {
 553   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 554   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_22MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 555   2              }
 556   1              else if (freq <= 44u)
 557   1              {
 558   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 559   2                      ((uint8)(CY_FLASH_LESSER_OR_EQUAL_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 560   2              }
 561   1              else
 562   1              {
 563   2                  *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
 564   2                      ((uint8)(CY_FLASH_GREATER_44MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
 565   2              }
 566   1      
 567   1          #endif  /* (CY_PSOC3) */
 568   1      
 569   1      
 570   1          #if (CY_PSOC5)
              
                      if (freq <= 16u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_16MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 33u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_33MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else if (freq <= 50u)
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_LESSER_OR_EQUAL_50MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
                      else
                      {
                          *CY_FLASH_CONTROL_PTR = ((*CY_FLASH_CONTROL_PTR & ((uint8)(~CY_FLASH_CYCLES_MASK))) |
                              ((uint8)(CY_FLASH_GREATER_51MHz << CY_FLASH_CYCLES_MASK_SHIFT)));
                      }
              
                  #endif  /* (CY_PSOC5) */
 594   1      
 595   1          /* Restore global interrupt enable state */
 596   1          CyExitCriticalSection(interruptState);
 597   1      }
 598          
 599          
 600          /*******************************************************************************
 601          * Function Name: CyEEPROM_Start
 602          ********************************************************************************
 603          *
 604          * Summary:
 605          *  Enable the EEPROM.
 606          *
 607          * Parameters:
 608          *  None
 609          *
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 11  

 610          * Return:
 611          *  None
 612          *
 613          *******************************************************************************/
 614          void CyEEPROM_Start(void) 
 615          {
 616   1          /* Active Power Mode */
 617   1          *CY_FLASH_PM_ACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 618   1      
 619   1          /* Standby Power Mode */
 620   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR |= CY_FLASH_PM_EE_MASK;
 621   1      }
 622          
 623          
 624          /*******************************************************************************
 625          * Function Name: CyEEPROM_Stop
 626          ********************************************************************************
 627          *
 628          * Summary:
 629          *  Disable the EEPROM.
 630          *
 631          * Parameters:
 632          *  None
 633          *
 634          * Return:
 635          *  None
 636          *
 637          *******************************************************************************/
 638          void CyEEPROM_Stop (void) 
 639          {
 640   1          /* Active Power Mode */
 641   1          *CY_FLASH_PM_ACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 642   1      
 643   1          /* Standby Power Mode */
 644   1          *CY_FLASH_PM_ALTACT_EEFLASH_PTR &= ((uint8)(~CY_FLASH_PM_EE_MASK));
 645   1      }
 646          
 647          
 648          /*******************************************************************************
 649          * Function Name: CyEEPROM_ReadReserve
 650          ********************************************************************************
 651          *
 652          * Summary:
 653          *  Request access to the EEPROM for reading and wait until access is available.
 654          *
 655          * Parameters:
 656          *  None
 657          *
 658          * Return:
 659          *  None
 660          *
 661          *******************************************************************************/
 662          void CyEEPROM_ReadReserve(void) 
 663          {
 664   1          /* Make a request for PHUB to have access */
 665   1          *CY_FLASH_EE_SCR_PTR |= CY_FLASH_EE_SCR_AHB_EE_REQ;
 666   1      
 667   1          while (0u == (*CY_FLASH_EE_SCR_PTR & CY_FLASH_EE_SCR_AHB_EE_ACK))
 668   1          {
 669   2              /* Wait for acknowledgement from PHUB */
 670   2          }
 671   1      }
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 12  

 672          
 673          
 674          /*******************************************************************************
 675          * Function Name: CyEEPROM_ReadRelease
 676          ********************************************************************************
 677          *
 678          * Summary:
 679          *  Release the read reservation of the EEPROM.
 680          *
 681          * Parameters:
 682          *  None
 683          *
 684          * Return:
 685          *  None
 686          *
 687          *******************************************************************************/
 688          void CyEEPROM_ReadRelease(void) 
 689          {
 690   1          *CY_FLASH_EE_SCR_PTR |= 0x00u;
 691   1      }
 692          
 693          
 694          /* [] END OF FILE */
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyFlash_Start (BEGIN)
                                           ; SOURCE LINE # 54
                                           ; SOURCE LINE # 55
                                           ; SOURCE LINE # 57
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0016 7F05              MOV     R7,#05H
0018 7E00              MOV     R6,#00H
001A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 63
001D 22                RET     
             ; FUNCTION CyFlash_Start (END)

             ; FUNCTION CyFlash_Stop (BEGIN)
                                           ; SOURCE LINE # 84
                                           ; SOURCE LINE # 85
                                           ; SOURCE LINE # 87
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54FE              ANL     A,#0FEH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
0016 22                RET     
             ; FUNCTION CyFlash_Stop (END)

             ; FUNCTION CySetTempInt (BEGIN)
                                           ; SOURCE LINE # 113
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 118
0000 120000      E     LCALL   CySpcStart
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 14  

                                           ; SOURCE LINE # 121
0003 900000      R     MOV     DPTR,#status
0006 74FF              MOV     A,#0FFH
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
0009 120000      E     LCALL   CySpcLock
000C EF                MOV     A,R7
000D 704A              JNZ     ?C0003
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
000F 7F01              MOV     R7,#01H
0011 120000      E     LCALL   _CySpcGetTemp
0014 EF                MOV     A,R7
0015 6407              XRL     A,#07H
0017 703B              JNZ     ?C0004
                                           ; SOURCE LINE # 127
0019         ?C0007:
                                           ; SOURCE LINE # 129
                                           ; SOURCE LINE # 130
0019 7B01              MOV     R3,#01H
001B 7A00        R     MOV     R2,#HIGH dieTemperature
001D 7900        R     MOV     R1,#LOW dieTemperature
001F 7D02              MOV     R5,#02H
0021 120000      E     LCALL   _CySpcReadData
0024 EF                MOV     A,R7
0025 B4021D            CJNE    A,#02H,?C0005
                                           ; SOURCE LINE # 131
                                           ; SOURCE LINE # 132
0028 900000      R     MOV     DPTR,#status
002B E4                CLR     A
002C F0                MOVX    @DPTR,A
002D         ?C0009:
                                           ; SOURCE LINE # 134
002D 904722            MOV     DPTR,#04722H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 5402              ANL     A,#02H
0035 FF                MOV     R7,A
0036 7E00              MOV     R6,#00H
0038 EF                MOV     A,R7
0039 4E                ORL     A,R6
003A 7018              JNZ     ?C0004
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 137
003C 7F01              MOV     R7,#01H
003E 7E00              MOV     R6,#00H
0040 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 138
0043 80E8              SJMP    ?C0009
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 142
0045         ?C0005:
0045 904722            MOV     DPTR,#04722H
0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 5402              ANL     A,#02H
004D FF                MOV     R7,A
004E 7E00              MOV     R6,#00H
0050 EF                MOV     A,R7
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 15  

0051 4E                ORL     A,R6
0052 60C5              JZ      ?C0007
                                           ; SOURCE LINE # 143
0054         ?C0004:
                                           ; SOURCE LINE # 145
0054 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 146
0057 8006              SJMP    ?C0011
0059         ?C0003:
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
0059 900000      R     MOV     DPTR,#status
005C 7404              MOV     A,#04H
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
005F         ?C0011:
                                           ; SOURCE LINE # 152
005F 900000      R     MOV     DPTR,#status
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 153
0064         ?C0012:
0064 22                RET     
             ; FUNCTION CySetTempInt (END)

             ; FUNCTION CySetTemp (BEGIN)
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0000 120000      R     LCALL   CySetTempInt
0003 900000      R     MOV     DPTR,#status
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
0008 900000      R     MOV     DPTR,#status
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7008              JNZ     ?C0013
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 185
0010 120000      R     LCALL   CySetTempInt
0013 900000      R     MOV     DPTR,#status
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
0018         ?C0013:
                                           ; SOURCE LINE # 188
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
                                           ; SOURCE LINE # 189
001D         ?C0014:
001D 22                RET     
             ; FUNCTION CySetTemp (END)

             ; FUNCTION _CySetFlashEEBuffer (BEGIN)
                                           ; SOURCE LINE # 212
0000 900000      R     MOV     DPTR,#buffer
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 16  

0006 900000      R     MOV     DPTR,#status
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
000B 120000      E     LCALL   CySpcStart
                                           ; SOURCE LINE # 237
000E 900000      R     MOV     DPTR,#buffer
0011 120000      E     LCALL   ?C?PLDXDATA
0014 900000      R     MOV     DPTR,#buffer
0017 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 241
001A 900000      R     MOV     DPTR,#status
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 242
001F         ?C0015:
001F 22                RET     
             ; FUNCTION _CySetFlashEEBuffer (END)

             ; FUNCTION _CyWriteRowData (BEGIN)
                                           ; SOURCE LINE # 272
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowAddress
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 273
                                           ; SOURCE LINE # 277
0013 900000      R     MOV     DPTR,#arrayId
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 943F              SUBB    A,#03FH
001C 4006              JC      ?C0016
001E 7E00              MOV     R6,#00H
0020 7F10              MOV     R7,#010H
0022 8004              SJMP    ?C0017
0024         ?C0016:
0024 7E01              MOV     R6,#01H
0026 7F00              MOV     R7,#00H
0028         ?C0017:
0028 900000      R     MOV     DPTR,#rowSize
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 278
0030 900000      R     MOV     DPTR,#arrayId
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 C007              PUSH    AR7
0037 900000      R     MOV     DPTR,#rowAddress
003A E0                MOVX    A,@DPTR
003B FC                MOV     R4,A
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 17  

003C A3                INC     DPTR
003D E0                MOVX    A,@DPTR
003E FD                MOV     R5,A
003F 900000      R     MOV     DPTR,#rowData
0042 120000      E     LCALL   ?C?PLDXDATA
0045 900000      R     MOV     DPTR,#rowSize
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A A3                INC     DPTR
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#?_CyWriteRowFull?BYTE+06H
0050 EE                MOV     A,R6
0051 F0                MOVX    @DPTR,A
0052 A3                INC     DPTR
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
0055 D007              POP     AR7
0057 120000      R     LCALL   _CyWriteRowFull
005A 900000      R     MOV     DPTR,#status
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 280
005F 900000      R     MOV     DPTR,#status
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
                                           ; SOURCE LINE # 281
0064         ?C0018:
0064 22                RET     
             ; FUNCTION _CyWriteRowData (END)

             ; FUNCTION _CyWriteRowFull (BEGIN)
                                           ; SOURCE LINE # 452
0000 900000      R     MOV     DPTR,#arrayId
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#rowNumber
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#rowData
0010 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 457
0013 120000      E     LCALL   CySpcLock
0016 EF                MOV     A,R7
0017 6003              JZ      $ + 5H
0019 020000      R     LJMP    ?C0019
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 460
001C 900000      R     MOV     DPTR,#arrayId
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 900000      R     MOV     DPTR,#rowData
0024 120000      E     LCALL   ?C?PLDXDATA
0027 900000      R     MOV     DPTR,#rowSize
002A E0                MOVX    A,@DPTR
002B FC                MOV     R4,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 18  

002E FD                MOV     R5,A
002F 900000      E     MOV     DPTR,#?_CySpcLoadRow?BYTE+04H
0032 EC                MOV     A,R4
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 ED                MOV     A,R5
0036 F0                MOVX    @DPTR,A
0037 120000      E     LCALL   _CySpcLoadRow
003A 900000      R     MOV     DPTR,#status
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
003F 900000      R     MOV     DPTR,#status
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 6407              XRL     A,#07H
0047 6003              JZ      $ + 5H
0049 020000      R     LJMP    ?C0020
                                           ; SOURCE LINE # 463
004C         ?C0021:
                                           ; SOURCE LINE # 464
004C 904722            MOV     DPTR,#04722H
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 5402              ANL     A,#02H
0054 FF                MOV     R7,A
0055 7E00              MOV     R6,#00H
0057 EF                MOV     A,R7
0058 4E                ORL     A,R6
0059 7009              JNZ     ?C0022
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 467
005B 7F01              MOV     R7,#01H
005D 7E00              MOV     R6,#00H
005F 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 468
0062 80E8              SJMP    ?C0021
0064         ?C0022:
                                           ; SOURCE LINE # 471
0064 904722            MOV     DPTR,#04722H
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
0069 EF                MOV     A,R7
006A 5402              ANL     A,#02H
006C FF                MOV     R7,A
006D 7E00              MOV     R6,#00H
006F EF                MOV     A,R7
0070 4E                ORL     A,R6
0071 600D              JZ      ?C0024
0073 904722            MOV     DPTR,#04722H
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
0078 EF                MOV     A,R7
0079 13                RRC     A
007A 13                RRC     A
007B 543F              ANL     A,#03FH
007D FF                MOV     R7,A
007E 8002              SJMP    ?C0025
0080         ?C0024:
0080 7FFF              MOV     R7,#0FFH
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 19  

0082         ?C0025:
0082 EF                MOV     A,R7
0083 7007              JNZ     ?C0023
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0085 900000      R     MOV     DPTR,#status
0088 E4                CLR     A
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
008A 8006              SJMP    ?C0026
008C         ?C0023:
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
008C 900000      R     MOV     DPTR,#status
008F 74FF              MOV     A,#0FFH
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
0092         ?C0026:
                                           ; SOURCE LINE # 480
0092 900000      R     MOV     DPTR,#status
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 EF                MOV     A,R7
0098 7074              JNZ     ?C0020
                                           ; SOURCE LINE # 481
                                           ; SOURCE LINE # 483
009A 900000      R     MOV     DPTR,#arrayId
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F 900000      R     MOV     DPTR,#rowNumber
00A2 E0                MOVX    A,@DPTR
00A3 FC                MOV     R4,A
00A4 A3                INC     DPTR
00A5 E0                MOVX    A,@DPTR
00A6 FD                MOV     R5,A
00A7 900000      R     MOV     DPTR,#dieTemperature
00AA E0                MOVX    A,@DPTR
00AB FB                MOV     R3,A
00AC 900000      R     MOV     DPTR,#dieTemperature+01H
00AF E0                MOVX    A,@DPTR
00B0 FE                MOV     R6,A
00B1 900000      E     MOV     DPTR,#?_CySpcWriteRow?BYTE+04H
00B4 EE                MOV     A,R6
00B5 F0                MOVX    @DPTR,A
00B6 120000      E     LCALL   _CySpcWriteRow
00B9 900000      R     MOV     DPTR,#status
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
00BE 900000      R     MOV     DPTR,#status
00C1 E0                MOVX    A,@DPTR
00C2 FF                MOV     R7,A
00C3 EF                MOV     A,R7
00C4 6407              XRL     A,#07H
00C6 7046              JNZ     ?C0020
                                           ; SOURCE LINE # 486
00C8         ?C0029:
                                           ; SOURCE LINE # 487
00C8 904722            MOV     DPTR,#04722H
00CB E0                MOVX    A,@DPTR
00CC FF                MOV     R7,A
00CD EF                MOV     A,R7
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 20  

00CE 5402              ANL     A,#02H
00D0 FF                MOV     R7,A
00D1 7E00              MOV     R6,#00H
00D3 EF                MOV     A,R7
00D4 4E                ORL     A,R6
00D5 7009              JNZ     ?C0030
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 490
00D7 7F01              MOV     R7,#01H
00D9 7E00              MOV     R6,#00H
00DB 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 491
00DE 80E8              SJMP    ?C0029
00E0         ?C0030:
                                           ; SOURCE LINE # 494
00E0 904722            MOV     DPTR,#04722H
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 EF                MOV     A,R7
00E6 5402              ANL     A,#02H
00E8 FF                MOV     R7,A
00E9 7E00              MOV     R6,#00H
00EB EF                MOV     A,R7
00EC 4E                ORL     A,R6
00ED 600D              JZ      ?C0032
00EF 904722            MOV     DPTR,#04722H
00F2 E0                MOVX    A,@DPTR
00F3 FF                MOV     R7,A
00F4 EF                MOV     A,R7
00F5 13                RRC     A
00F6 13                RRC     A
00F7 543F              ANL     A,#03FH
00F9 FF                MOV     R7,A
00FA 8002              SJMP    ?C0033
00FC         ?C0032:
00FC 7FFF              MOV     R7,#0FFH
00FE         ?C0033:
00FE EF                MOV     A,R7
00FF 7007              JNZ     ?C0031
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
0101 900000      R     MOV     DPTR,#status
0104 E4                CLR     A
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0106 8006              SJMP    ?C0020
0108         ?C0031:
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
0108 900000      R     MOV     DPTR,#status
010B 74FF              MOV     A,#0FFH
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 502
                                           ; SOURCE LINE # 503
                                           ; SOURCE LINE # 505
010E         ?C0020:
                                           ; SOURCE LINE # 507
010E 120000      E     LCALL   CySpcUnlock
                                           ; SOURCE LINE # 508
0111 8006              SJMP    ?C0035
0113         ?C0019:
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 21  

                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0113 900000      R     MOV     DPTR,#status
0116 7404              MOV     A,#04H
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
0119         ?C0035:
                                           ; SOURCE LINE # 514
0119 900000      R     MOV     DPTR,#status
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
                                           ; SOURCE LINE # 515
011E         ?C0036:
011E 22                RET     
             ; FUNCTION _CyWriteRowFull (END)

             ; FUNCTION _CyFlash_SetWaitCycles (BEGIN)
                                           ; SOURCE LINE # 536
0000 900000      R     MOV     DPTR,#freq
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
                                           ; SOURCE LINE # 541
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
000D 900000      R     MOV     DPTR,#freq
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 9416              SUBB    A,#016H
0016 5014              JNC     ?C0037
                                           ; SOURCE LINE # 552
                                           ; SOURCE LINE # 554
0018 904800            MOV     DPTR,#04800H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 543F              ANL     A,#03FH
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 4440              ORL     A,#040H
0024 FF                MOV     R7,A
0025 904800            MOV     DPTR,#04800H
0028 EF                MOV     A,R7
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 555
002A 8031              SJMP    ?C0038
002C         ?C0037:
                                           ; SOURCE LINE # 556
002C 900000      R     MOV     DPTR,#freq
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 D3                SETB    C
0033 942C              SUBB    A,#02CH
0035 5014              JNC     ?C0039
                                           ; SOURCE LINE # 557
                                           ; SOURCE LINE # 559
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 22  

0037 904800            MOV     DPTR,#04800H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 543F              ANL     A,#03FH
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 4480              ORL     A,#080H
0043 FF                MOV     R7,A
0044 904800            MOV     DPTR,#04800H
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0049 8012              SJMP    ?C0038
004B         ?C0039:
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 564
004B 904800            MOV     DPTR,#04800H
004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 543F              ANL     A,#03FH
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 44C0              ORL     A,#0C0H
0057 FF                MOV     R7,A
0058 904800            MOV     DPTR,#04800H
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
005D         ?C0038:
                                           ; SOURCE LINE # 596
005D 900000      R     MOV     DPTR,#interruptState
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 597
0065 22                RET     
             ; FUNCTION _CyFlash_SetWaitCycles (END)

             ; FUNCTION CyEEPROM_Start (BEGIN)
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 617
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4410              ORL     A,#010H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 620
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4410              ORL     A,#010H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 23  

0016 22                RET     
             ; FUNCTION CyEEPROM_Start (END)

             ; FUNCTION CyEEPROM_Stop (BEGIN)
                                           ; SOURCE LINE # 638
                                           ; SOURCE LINE # 639
                                           ; SOURCE LINE # 641
0000 9043AC            MOV     DPTR,#043ACH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54EF              ANL     A,#0EFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 644
000B 9043BC            MOV     DPTR,#043BCH
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 54EF              ANL     A,#0EFH
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 645
0016 22                RET     
             ; FUNCTION CyEEPROM_Stop (END)

             ; FUNCTION CyEEPROM_ReadReserve (BEGIN)
                                           ; SOURCE LINE # 662
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 665
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
000B         ?C0044:
                                           ; SOURCE LINE # 667
000B 904702            MOV     DPTR,#04702H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5402              ANL     A,#02H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
0018 60F1              JZ      ?C0044
                                           ; SOURCE LINE # 668
                                           ; SOURCE LINE # 670
001A         ?C0045:
                                           ; SOURCE LINE # 671
001A         ?C0046:
001A 22                RET     
             ; FUNCTION CyEEPROM_ReadReserve (END)

             ; FUNCTION CyEEPROM_ReadRelease (BEGIN)
                                           ; SOURCE LINE # 688
C51 COMPILER V9.51   CYFLASH                                                               06/30/2014 14:50:39 PAGE 24  

                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 690
0000 904702            MOV     DPTR,#04702H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4400              ORL     A,#00H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 691
000B 22                RET     
             ; FUNCTION CyEEPROM_ReadRelease (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    791    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2      26
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
