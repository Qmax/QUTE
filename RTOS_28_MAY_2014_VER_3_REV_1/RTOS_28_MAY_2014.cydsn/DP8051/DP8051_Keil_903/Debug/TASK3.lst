C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE TASK3
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\TASK3.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\TASK
                    -3.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\TASK3.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Sou
                    -rce\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\TASK3.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright QMAX, 2012
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           *
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF QMAX.
   9           *
  10           * ========================================
  11          */
  12          
  13          #include "TASK1.h"
  14          #include "TASK2.h"
  15          #include "TASK3.h"
  16          
  17          unsigned char k_val1,embd_prb_int_config;
  18          uint8 count;
  19          int t;
  20          
  21          CY_ISR_PROTO(key_interrupt);                                            //      prototype for reloacted keypad isr Interrupt
  22          
  23          void task3 (void) _task_ 3
  24          {
  25   1              k_isr_ClearPending();                                                   //      clear any pending Interrupt
  26   1              k_isr_StartEx(key_interrupt);                                   //      Change the Interrupt Address to custom ISR routine
  27   1                      
  28   1              while (1)
  29   1              {
  30   2                      os_wait1(K_SIG);                                                        //      Wait for signal from k_isr Interrupt routine
  31   2                      
  32   2                      k_port = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);                     //      store the key Value from PORT 0 to k_port
  33   2                      k_port = k_port ^ 0x88;                                                         //      Return key value
  34   2                      
  35   2                      do      {                                                                                               //      Key Debounce Logic: Interrupt disabled &
  36   3                                      k_val1 = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);     //      key press on hold untill key is released
  37   3                                      k_val1 = k_val1 & 0x77;                                         //      this line was included inside the loop on [29/11/2012]
  38   3                      }       while(k_val1);                                                          //      This does not interrupt the UART Process
  39   2                      
  40   2                      k_val =  k_port;                                                                        //      Return key vale
  41   2      /*              if(!CyPins_ReadPin(KEY_INT))                    //      Key Debounce Logic: Wait for defined time
  42   2                      {                                                                               //      before the key press is released. If the 
  43   2                              for(t = -20000; t <= k_val; t++)        //      key press is released earlier the loop is broken.
  44   2                              {
  45   2                                      if(!CyPins_ReadPin(KEY_INT))
  46   2                                      {
  47   2                                              k_val = 1;
  48   2                                      }
  49   2                                      else
  50   2                                      {
  51   2                                              k_val = -20000;
  52   2                                      }
  53   2                              }
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 2   

  54   2                      }*/
  55   2                      CyIntEnable (24);                                                       //      Enable k_isr Interrupt
  56   2      //              count++;
  57   2                      if(embd_prb_int_config == 0x00)                         //      Select PSoC_Int0
  58   2                      {
  59   3                              CyPins_ClearPin(PSoC_INT0_P3_7);                //      Interrupt line to CPU(i.MX51) Set low
  60   3                              CyPins_SetPin(PSoC_INT0_P3_7);                  //      Interrupt line Set high
  61   3                      }
  62   2                      else if(embd_prb_int_config == 0x01)            //      Select PSoC_Int1
  63   2                      {
  64   3                              CyPins_ClearPin(PSoC_INT1_P3_6);                //      Interrupt line to CPU(i.MX51) Set low
  65   3                              CyPins_SetPin(PSoC_INT1_P3_6);                  //      Interrupt line Set high
  66   3                      }
  67   2      //              UART_WriteTxData(count);
  68   2      //              while(!(UART_ReadTxStatus() & UART_TX_STS_FIFO_EMPTY))
  69   2      //              {
  70   2      //                      ;
  71   2      //              }
  72   2              }
  73   1      }
  74          
  75          CY_ISR(key_interrupt)                                                   //      Relocated Key Pad ISR
  76          {
  77   1              CyIntDisable (24);                                                      //      Disable k_isr Interrupt
  78   1      /*      for(k_val = 0; k_val <= 50; k_val++)
  79   1              {
  80   1                      k_port = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);     //      store the key Value from PORT 0 to k_port
  81   1                      
  82   1                      if(k_port)
  83   1                      {
  84   1                              break;
  85   1                      }
  86   1              }       */
  87   1              k_port = CY_GET_REG8(CYDEV_IO_PRT_PRT0_PS);     //      store the key Value from PORT 0 to k_port
  88   1              k_port = k_port ^ 0x88;                                         //      Set Keysense active high '1'
  89   1              
  90   1              if(k_port)                                                                      //      Execute if Key probe connected
  91   1              {
  92   2                      if(k_port & 0x77)    
  93   2                      {
  94   3                              isr_send_signal(3);
  95   3                              KEY_ClearInterrupt();                           //      Enable k_isr Interrupt
  96   3                      }
  97   2                      else
  98   2                      {
  99   3                              CyIntEnable (24);                                       //      Enable k_isr Interrupt
 100   3                              KEY_ClearInterrupt();                           //      Enable k_isr Interrupt
 101   3                      }
 102   2              }
 103   1              else
 104   1              {
 105   2                      KEY_ClearInterrupt();                                   //      Enable k_isr Interrupt
 106   2                      CyIntEnable (24);                                               //      Enable k_isr Interrupt
 107   2              }
 108   1      
 109   1      //      isr_send_signal(3);                                                     //      SEND SIGNAL TO TASK3 FOR EXECUTION
 110   1      //      KEY_ClearInterrupt();                                           //      Clear the interrupt Status
 111   1      
 112   1      }
 113          
 114          void TASK_3 ()                                                                  //      INITIALISATION FUNCTION OF TASK3
 115          {
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 3   

 116   1              os_create_task(3);                                                      //      CREATION OF TASK3
 117   1      }
 118          
 119          /* [] END OF FILE */
*** WARNING C316 IN LINE 119 OF .\TASK3.c: unterminated conditionals
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 4   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION task3 (BEGIN)
                                           ; SOURCE LINE # 23
                                           ; SOURCE LINE # 25
0000 120000      E     LCALL   k_isr_ClearPending
                                           ; SOURCE LINE # 26
0003 7E00        R     MOV     R6,#HIGH key_interrupt
0005 7F00        R     MOV     R7,#LOW key_interrupt
0007 120000      E     LCALL   _k_isr_StartEx
000A         ?C0001:
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
                                           ; SOURCE LINE # 30
000A 7F01              MOV     R7,#01H
000C 120000      E     LCALL   _os_wait1
                                           ; SOURCE LINE # 32
000F 905101            MOV     DPTR,#05101H
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 900000      E     MOV     DPTR,#k_port
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
0019 900000      E     MOV     DPTR,#k_port
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 6488              XRL     A,#088H
0021 FF                MOV     R7,A
0022 900000      E     MOV     DPTR,#k_port
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
0027         ?C0005:
                                           ; SOURCE LINE # 35
                                           ; SOURCE LINE # 36
0027 905101            MOV     DPTR,#05101H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C 900000      R     MOV     DPTR,#k_val1
002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
0031 900000      R     MOV     DPTR,#k_val1
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 5477              ANL     A,#077H
0039 FF                MOV     R7,A
003A 900000      R     MOV     DPTR,#k_val1
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
003F 900000      R     MOV     DPTR,#k_val1
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 70E0              JNZ     ?C0005
                                           ; SOURCE LINE # 40
0047 900000      E     MOV     DPTR,#k_port
004A E0                MOVX    A,@DPTR
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 5   

004B FF                MOV     R7,A
004C 900000      E     MOV     DPTR,#k_val
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
0051 7F18              MOV     R7,#018H
0053 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 57
0056 900000      R     MOV     DPTR,#embd_prb_int_config
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 7018              JNZ     ?C0006
                                           ; SOURCE LINE # 58
                                           ; SOURCE LINE # 59
005E 90501F            MOV     DPTR,#0501FH
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 54FE              ANL     A,#0FEH
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
0069 90501F            MOV     DPTR,#0501FH
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 4401              ORL     A,#01H
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 61
0074 8094              SJMP    ?C0001
0076         ?C0006:
                                           ; SOURCE LINE # 62
0076 900000      R     MOV     DPTR,#embd_prb_int_config
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C B4018B            CJNE    A,#01H,?C0001
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 64
007F 90501E            MOV     DPTR,#0501EH
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 54FE              ANL     A,#0FEH
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 65
008A 90501E            MOV     DPTR,#0501EH
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
008F EF                MOV     A,R7
0090 4401              ORL     A,#01H
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 66
                                           ; SOURCE LINE # 72
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 6   

0095 020000      R     LJMP    ?C0001
0098 22                RET     
             ; FUNCTION task3 (END)

             ; FUNCTION key_interrupt (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C085              PUSH    DPH1
000A C084              PUSH    DPL1
000C C086              PUSH    DPS
000E 758600            MOV     DPS,#00H
0011 C000        E     PUSH    ?C?XPAGE1SFR
0013 750000      E     MOV     ?C?XPAGE1SFR,#?C?XPAGE1RST
0016 C0D0              PUSH    PSW
0018 75D000            MOV     PSW,#00H
001B C000              PUSH    AR0
001D C001              PUSH    AR1
001F C002              PUSH    AR2
0021 C003              PUSH    AR3
0023 C004              PUSH    AR4
0025 C005              PUSH    AR5
0027 C006              PUSH    AR6
0029 C007              PUSH    AR7
                                           ; SOURCE LINE # 75
                                           ; SOURCE LINE # 77
002B 7F18              MOV     R7,#018H
002D 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 87
0030 905101            MOV     DPTR,#05101H
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 900000      E     MOV     DPTR,#k_port
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
003A 900000      E     MOV     DPTR,#k_port
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 6488              XRL     A,#088H
0042 FF                MOV     R7,A
0043 900000      E     MOV     DPTR,#k_port
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0048 900000      E     MOV     DPTR,#k_port
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 6020              JZ      ?C0010
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 92
0050 900000      E     MOV     DPTR,#k_port
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 5477              ANL     A,#077H
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 600A              JZ      ?C0011
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 7   

                                           ; SOURCE LINE # 93
                                           ; SOURCE LINE # 94
005C 7F03              MOV     R7,#03H
005E 120000      E     LCALL   _isr_send_signal
                                           ; SOURCE LINE # 95
0061 120000      E     LCALL   KEY_ClearInterrupt
                                           ; SOURCE LINE # 96
0064 8012              SJMP    ?C0014
0066         ?C0011:
                                           ; SOURCE LINE # 98
                                           ; SOURCE LINE # 99
0066 7F18              MOV     R7,#018H
0068 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 100
006B 120000      E     LCALL   KEY_ClearInterrupt
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
006E 8008              SJMP    ?C0014
0070         ?C0010:
                                           ; SOURCE LINE # 104
                                           ; SOURCE LINE # 105
0070 120000      E     LCALL   KEY_ClearInterrupt
                                           ; SOURCE LINE # 106
0073 7F18              MOV     R7,#018H
0075 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 107
                                           ; SOURCE LINE # 112
0078         ?C0014:
0078 D007              POP     AR7
007A D006              POP     AR6
007C D005              POP     AR5
007E D004              POP     AR4
0080 D003              POP     AR3
0082 D002              POP     AR2
0084 D001              POP     AR1
0086 D000              POP     AR0
0088 D0D0              POP     PSW
008A D000        E     POP     ?C?XPAGE1SFR
008C D086              POP     DPS
008E D084              POP     DPL1
0090 D085              POP     DPH1
0092 D082              POP     DPL
0094 D083              POP     DPH
0096 D0F0              POP     B
0098 D0E0              POP     ACC
009A 32                RETI    
             ; FUNCTION key_interrupt (END)

             ; FUNCTION TASK_3 (BEGIN)
                                           ; SOURCE LINE # 114
                                           ; SOURCE LINE # 115
                                           ; SOURCE LINE # 116
0000 7F03              MOV     R7,#03H
0002 120000      E     LCALL   _os_create_task
                                           ; SOURCE LINE # 117
0005 22                RET     
             ; FUNCTION TASK_3 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    314    ----
C51 COMPILER V9.03   TASK3                                                                 11/13/2013 12:17:02 PAGE 8   

   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
