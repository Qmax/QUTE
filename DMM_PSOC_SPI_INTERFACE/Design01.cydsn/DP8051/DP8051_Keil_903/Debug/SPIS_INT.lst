C51 COMPILER V9.03   SPIS_INT                                                              02/17/2014 10:42:14 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE SPIS_INT
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\SPIS_INT.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\SPIS_INT.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\SPIS_INT.lst) CD DB NOIP OT
                    -(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\SPIS_INT.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: SPIS_INT.c
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file provides all Interrupt Service Routine (ISR) for the SPI Slave
   7          *  component.
   8          *
   9          * Note:
  10          *  None.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "SPIS.h"
  20          
  21          #if (SPIS_RXBUFFERSIZE > 4u)
              
                  extern volatile uint16 SPIS_RXBUFFER[];
                  extern volatile uint8 SPIS_rxBufferRead;
                  extern volatile uint8 SPIS_rxBufferWrite;
                  extern volatile uint8 SPIS_rxBufferFull;
              
              #endif /* SPIS_RXBUFFERSIZE > 4u */
  29          
  30          #if (SPIS_TXBUFFERSIZE > 4u)
              
                  extern volatile uint16 SPIS_TXBUFFER[];
                  extern volatile uint8 SPIS_txBufferRead;
                  extern volatile uint8 SPIS_txBufferWrite;
                  extern volatile uint8 SPIS_txBufferFull;
              
              #endif /* SPIS_TXBUFFERSIZE > 4u */
  38          
  39          volatile uint8 SPIS_swStatusTx = 0u;
  40          volatile uint8 SPIS_swStatusRx = 0u;
  41          
  42          /* User code required at start of ISR */
  43          /* `#START SPIS_ISR_START_DEF` */
  44          
  45          /* `#END` */
  46          
  47          
  48          /*******************************************************************************
  49          * Function Name: SPIS_TX_ISR
  50          *
  51          * Summary:
  52          *  Interrupt Service Routine for TX portion of the SPI Slave.
  53          *
C51 COMPILER V9.03   SPIS_INT                                                              02/17/2014 10:42:14 PAGE 2   

  54          * Parameters:
  55          *  None.
  56          *
  57          * Return:
  58          *  None.
  59          *
  60          * Global variables:
  61          *  SPIS_txBufferWrite - used for the account of the bytes which
  62          *  have been written down in the TX software buffer.
  63          *  SPIS_txBufferRead - used for the account of the bytes which
  64          *  have been read from the TX software buffer, modified when exist data to
  65          *  sending and FIFO Not Full.
  66          *  SPIS_TXBUFFER[SPIS_TXBUFFERSIZE] - used to store
  67          *  data to sending.
  68          *  All described above Global variables are used when Software Buffer is used.
  69          *
  70          *******************************************************************************/
  71          CY_ISR(SPIS_TX_ISR)
  72          {
  73   1          /* User code required at start of ISR */
  74   1          /* `#START SPIS_ISR_TX_START` */
  75   1      
  76   1          /* `#END` */
  77   1      
  78   1          #if((SPIS_InternalTxInterruptEnabled) && (SPIS_TXBUFFERSIZE > 4u))
                      /* Component interrupt service code */
              
                      /* See if TX data buffer is not empty and there is space in TX FIFO */
                      while(SPIS_txBufferRead != SPIS_txBufferWrite)
                      {
                          SPIS_swStatusTx = SPIS_GET_STATUS_TX(SPIS_swStatusTx);
              
                          if ((SPIS_swStatusTx & SPIS_STS_TX_FIFO_NOT_FULL) != 0u)
                          {
                              if(SPIS_txBufferFull == 0u)
                              {
                                 SPIS_txBufferRead++;
              
                                  if(SPIS_txBufferRead >= SPIS_TXBUFFERSIZE)
                                  {
                                      SPIS_txBufferRead = 0u;
                                  }
                              }
                              else
                              {
                                  SPIS_txBufferFull = 0u;
                              }
              
                              /* Move data from the Buffer to the FIFO */
                              CY_SET_REG16(SPIS_TXDATA_PTR,
                                  SPIS_TXBUFFER[SPIS_txBufferRead]);
                          }
                          else
                          {
                              break;
                          }
                      }
              
                      /* If Buffer is empty then disable TX FIFO status interrupt until there is data in the buffer */
                      if(SPIS_txBufferRead == SPIS_txBufferWrite)
                      {
                          SPIS_TX_STATUS_MASK_REG &= ~SPIS_STS_TX_FIFO_NOT_FULL;
C51 COMPILER V9.03   SPIS_INT                                                              02/17/2014 10:42:14 PAGE 3   

                      }
              
                  #endif /* SPIS_InternalTxInterruptEnabled && (SPIS_TXBUFFERSIZE > 4u) */
 119   1      
 120   1          /* User code required at end of ISR (Optional) */
 121   1          /* `#START SPIS_ISR_TX_END` */
 122   1      
 123   1          /* `#END` */
 124   1      
 125   1          #ifdef SPIS_TxInternalInterrupt__ES2_PATCH
 126   1              #if(CY_PSOC3_ES2 && (SPIS_TxInternalInterrupt__ES2_PATCH))
                          SPIS_TX_ISR_PATCH();
                      #endif /* End PSOC3_ES2 */
 129   1          #endif /* SPIS_TxInternalInterrupt__ES2_PATCH */
 130   1      }
 131          
 132          
 133          /*******************************************************************************
 134          * Function Name: SPIS_RX_ISR
 135          *
 136          * Summary:
 137          *  Interrupt Service Routine for RX portion of the SPI Slave.
 138          *
 139          * Parameters:
 140          *  None.
 141          *
 142          * Return:
 143          *  None.
 144          *
 145          * Global variables:
 146          *  SPIS_rxBufferWrite - used for the account of the bytes which
 147          *  have been written down in the RX software buffer modified when FIFO contains
 148          *  new data.
 149          *  SPIS_rxBufferRead - used for the account of the bytes which
 150          *  have been read from the RX software buffer, modified when overflow occurred.
 151          *  SPIS_RXBUFFER[SPIS_RXBUFFERSIZE] - used to store
 152          *  received data, modified when FIFO contains new data.
 153          *  All described above Global variables are used when Software Buffer is used.
 154          *
 155          *******************************************************************************/
 156          CY_ISR(SPIS_RX_ISR)
 157          {
 158   1          #if((SPIS_InternalRxInterruptEnabled) && (SPIS_RXBUFFERSIZE > 4u))
                      uint16 rxData = 0u; 
                  #endif /* SPIS_InternalRxInterruptEnabled */
 161   1          
 162   1          /* User code required at start of ISR */
 163   1          /* `#START SPIS_RX_ISR_START` */
 164   1      
 165   1          /* `#END` */
 166   1      
 167   1          #if((SPIS_InternalRxInterruptEnabled) && (SPIS_RXBUFFERSIZE > 4u))
                      SPIS_swStatusRx = SPIS_GET_STATUS_RX(SPIS_swStatusRx);
              
                      /* See if RX data FIFO has some data and if it can be moved to the RX Buffer */        
                      while((SPIS_swStatusRx & SPIS_STS_RX_FIFO_NOT_EMPTY) ==
                                                                                              SPIS_STS_RX_FIFO_NOT_EMPTY
             -)
                      {
                          rxData = CY_GET_REG16(SPIS_RXDATA_PTR);
                          
                          /* Set next pointer. */
C51 COMPILER V9.03   SPIS_INT                                                              02/17/2014 10:42:14 PAGE 4   

                          SPIS_rxBufferWrite++;
                          if(SPIS_rxBufferWrite >= SPIS_RXBUFFERSIZE)
                          {
                              SPIS_rxBufferWrite = 0u;
                          }
              
                          if(SPIS_rxBufferWrite == SPIS_rxBufferRead)
                          {
                              SPIS_rxBufferRead++;
                              if(SPIS_rxBufferRead >= SPIS_RXBUFFERSIZE)
                              {
                                  SPIS_rxBufferRead = 0u;
                              }
                              SPIS_rxBufferFull = 1u;
                          }
              
                          /* Move data from the FIFO to the Buffer */
                          SPIS_RXBUFFER[SPIS_rxBufferWrite] = rxData;
                              
                          SPIS_swStatusRx = SPIS_GET_STATUS_RX(SPIS_swStatusRx);
                      }
                  #endif /* SPIS_InternalRxInterruptEnabled  && (SPIS_RXBUFFERSIZE > 4u) */
 199   1      
 200   1          /* User code required at end of ISR (Optional) */
 201   1          /* `#START SPIS_RX_ISR_END` */
 202   1      
 203   1          /* `#END` */
 204   1      
 205   1          #ifdef SPIS_RxInternalInterrupt__ES2_PATCH
 206   1              #if(CY_PSOC3_ES2 && (SPIS_RxInternalInterrupt__ES2_PATCH))
                          SPIS_RX_ISR_PATCH();
                      #endif /* End PSOC3_ES2 */
 209   1          #endif /* SPIS_RxInternalInterrupt__ES2_PATCH */
 210   1      }
 211          
 212          /* [] END OF FILE */
C51 COMPILER V9.03   SPIS_INT                                                              02/17/2014 10:42:14 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SPIS_TX_ISR (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 130
0000 32                RETI    
             ; FUNCTION SPIS_TX_ISR (END)

             ; FUNCTION SPIS_RX_ISR (BEGIN)
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 210
0000 32                RETI    
             ; FUNCTION SPIS_RX_ISR (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =      2    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
