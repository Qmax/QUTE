C51 COMPILER V9.03   SPIS_PM                                                               02/17/2014 10:42:14 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE SPIS_PM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\SPIS_PM.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\SPIS_PM.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\SPIS_PM.lst) CD DB NOIP OT(2
                    -,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\SPIS_PM.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: SPIS_PM.c
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file contains the setup, control and status commands to support
   7          *  component operations in low power mode.
   8          *
   9          * Note:
  10          *
  11          ********************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions,
  14          * disclaimers, and limitations in the end user license agreement accompanying
  15          * the software package with which this file was provided.
  16          *******************************************************************************/
  17          
  18          #include "SPIS.h"
  19          
  20          static SPIS_BACKUP_STRUCT SPIS_backup = {
  21                                                  0u,
  22                                                  SPIS_BITCTR_INIT,
  23                                                  #if(CY_PSOC3_ES2 || CY_PSOC5_ES1)
                                                          SPIS_TX_INIT_INTERRUPTS_MASK,
                                                          SPIS_RX_INIT_INTERRUPTS_MASK
                                                      #endif /* CY_PSOC3_ES2 || CY_PSOC5_ES1 */
  27                                                  };
  28          
  29          #if (SPIS_TXBUFFERSIZE > 4u)
              
                  extern volatile uint8 SPIS_txBufferRead;
                  extern volatile uint8 SPIS_txBufferWrite;
              
              #endif /* SPIS_TXBUFFERSIZE > 4u */
  35          
  36          #if (SPIS_RXBUFFERSIZE > 4u)
              
                  extern volatile uint8 SPIS_rxBufferRead;
                  extern volatile uint8 SPIS_rxBufferWrite;
              
              #endif /* SPIS_RXBUFFERSIZE > 4u */
  42          
  43          
  44          /*******************************************************************************
  45          * Function Name: SPIS_SaveConfig
  46          ********************************************************************************
  47          *
  48          * Summary:
  49          *  Saves SPIM configuration.
  50          *
  51          * Parameters:
  52          *  None.
  53          *
C51 COMPILER V9.03   SPIS_PM                                                               02/17/2014 10:42:14 PAGE 2   

  54          * Return:
  55          *  None.
  56          *
  57          * Global Variables:
  58          *  SPIS_backup - modified when non-retention registers are saved.
  59          *
  60          * Reentrant:
  61          *  No.
  62          *
  63          *******************************************************************************/
  64          void SPIS_SaveConfig(void)
  65          {
  66   1          /* Store Status Mask registers */
  67   1          #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
              
                     SPIS_backup.saveSrTxIntMask = SPIS_TX_STATUS_MASK_REG;
                     SPIS_backup.saveSrRxIntMask = SPIS_RX_STATUS_MASK_REG;
                     SPIS_backup.cntrPeriod = SPIS_COUNTER_PERIOD_REG;
              
                  #endif /* (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
  74   1      }
  75          
  76          
  77          /*******************************************************************************
  78          * Function Name: SPIS_RestoreConfig
  79          ********************************************************************************
  80          *
  81          * Summary:
  82          *  Restores SPIM configuration.
  83          *
  84          * Parameters:
  85          *  None.
  86          *
  87          * Return:
  88          *  None.
  89          *
  90          * Global Variables:
  91          *  SPIS_backup - used when non-retention registers are restored.
  92          *
  93          * Side Effects:
  94          *  If this API is called without first calling SaveConfig then in the following
  95          *  registers will be default values from Customizer:
  96          *  SPIS_STATUS_MASK_REG and SPIS_COUNTER_PERIOD_REG.
  97          *
  98          *******************************************************************************/
  99          void SPIS_RestoreConfig(void) 
 100          {
 101   1          /* Restore the data, saved by SaveConfig() function */
 102   1          #if (CY_PSOC3_ES2 || CY_PSOC5_ES1)
              
                      SPIS_TX_STATUS_MASK_REG = SPIS_backup.saveSrTxIntMask;
                      SPIS_RX_STATUS_MASK_REG = SPIS_backup.saveSrRxIntMask;
                      SPIS_COUNTER_PERIOD_REG = SPIS_backup.cntrPeriod;
              
                  #endif /* (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
 109   1      }
 110          
 111          
 112          /*******************************************************************************
 113          * Function Name: SPIS_Sleep
 114          ********************************************************************************
 115          *
C51 COMPILER V9.03   SPIS_PM                                                               02/17/2014 10:42:14 PAGE 3   

 116          * Summary:
 117          *  Prepare SPIM Component goes to sleep.
 118          *
 119          * Parameters:
 120          *  None.
 121          *
 122          * Return:
 123          *  None.
 124          *
 125          * Global Variables:
 126          *  SPIS_backup - modified when non-retention registers are saved.
 127          *
 128          * Reentrant:
 129          *  No.
 130          *
 131          *******************************************************************************/
 132          void SPIS_Sleep(void)
 133          {
 134   1          /* Save components enable state */
 135   1          if ((SPIS_TX_STATUS_ACTL_REG & SPIS_INT_ENABLE) == SPIS_INT_ENABLE)
 136   1          {
 137   2              SPIS_backup.enableState = 1u;
 138   2          }
 139   1          else /* Components block is disabled */
 140   1          {
 141   2              SPIS_backup.enableState = 0u;
 142   2          }
 143   1      
 144   1          SPIS_Stop();
 145   1      
 146   1          SPIS_SaveConfig();
 147   1      }
 148          
 149          
 150          /*******************************************************************************
 151          * Function Name: SPIS_Wakeup
 152          ********************************************************************************
 153          *
 154          * Summary:
 155          *  Prepare SPIM Component to wake up.
 156          *
 157          * Parameters:
 158          *  None.
 159          *
 160          * Return:
 161          *  None.
 162          *
 163          * Global Variables:
 164          *  SPIS_backup - used when non-retention registers are restored.
 165          *  SPIS_txBufferWrite - modified every function call - resets to
 166          *  zero.
 167          *  SPIS_txBufferRead - modified every function call - resets to
 168          *  zero.
 169          *  SPIS_rxBufferWrite - modified every function call - resets to
 170          *  zero.
 171          *  SPIS_rxBufferRead - modified every function call - resets to
 172          *  zero.
 173          *
 174          * Reentrant:
 175          *  No.
 176          *
 177          *******************************************************************************/
C51 COMPILER V9.03   SPIS_PM                                                               02/17/2014 10:42:14 PAGE 4   

 178          void SPIS_Wakeup(void)
 179          {
 180   1          SPIS_RestoreConfig();
 181   1      
 182   1          #if (SPIS_TXBUFFERSIZE > 4u)
              
                      SPIS_txBufferRead = 0u;
                      SPIS_txBufferWrite = 0u;
              
                  #endif /* SPIS_TXBUFFERSIZE > 4u */
 188   1      
 189   1          #if (SPIS_RXBUFFERSIZE > 4u)
              
                      SPIS_rxBufferRead = 0u;
                      SPIS_rxBufferWrite = 0u;
              
                  #endif /* SPIS_RXBUFFERSIZE > 4u */
 195   1      
 196   1          SPIS_ClearFIFO();
 197   1      
 198   1          /* Restore components block enable state */
 199   1          if (SPIS_backup.enableState != 0u)
 200   1          {
 201   2               /* Components block was enabled */
 202   2               SPIS_Enable();
 203   2          } /* Do nothing if components block was disabled */
 204   1      }
 205          
 206          
 207          /* [] END OF FILE */
C51 COMPILER V9.03   SPIS_PM                                                               02/17/2014 10:42:14 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION SPIS_SaveConfig (BEGIN)
                                           ; SOURCE LINE # 64
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 74
0000 22                RET     
             ; FUNCTION SPIS_SaveConfig (END)

             ; FUNCTION SPIS_RestoreConfig (BEGIN)
                                           ; SOURCE LINE # 99
                                           ; SOURCE LINE # 100
                                           ; SOURCE LINE # 109
0000 22                RET     
             ; FUNCTION SPIS_RestoreConfig (END)

             ; FUNCTION SPIS_Sleep (BEGIN)
                                           ; SOURCE LINE # 132
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 135
0000 906497            MOV     DPTR,#06497H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5410              ANL     A,#010H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 6410              XRL     A,#010H
000E 4E                ORL     A,R6
000F 7008              JNZ     ?C0003
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
0011 900000      R     MOV     DPTR,#SPIS_backup
0014 7401              MOV     A,#01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 138
0017 8005              SJMP    ?C0004
0019         ?C0003:
                                           ; SOURCE LINE # 140
                                           ; SOURCE LINE # 141
0019 900000      R     MOV     DPTR,#SPIS_backup
001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 142
001E         ?C0004:
                                           ; SOURCE LINE # 144
001E 120000      E     LCALL   SPIS_Stop
                                           ; SOURCE LINE # 146
0021 120000      R     LCALL   SPIS_SaveConfig
                                           ; SOURCE LINE # 147
0024 22                RET     
             ; FUNCTION SPIS_Sleep (END)

             ; FUNCTION SPIS_Wakeup (BEGIN)
                                           ; SOURCE LINE # 178
                                           ; SOURCE LINE # 179
                                           ; SOURCE LINE # 180
0000 120000      R     LCALL   SPIS_RestoreConfig
                                           ; SOURCE LINE # 196
0003 120000      E     LCALL   SPIS_ClearFIFO
C51 COMPILER V9.03   SPIS_PM                                                               02/17/2014 10:42:14 PAGE 6   

                                           ; SOURCE LINE # 199
0006 900000      R     MOV     DPTR,#SPIS_backup
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 6003              JZ      ?C0007
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 202
000E 120000      E     LCALL   SPIS_Enable
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 204
0011         ?C0007:
0011 22                RET     
             ; FUNCTION SPIS_Wakeup (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     57    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
