C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\main.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\main
                    -.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\main.lst) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Sourc
                    -e\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\main.obj)

line level    source

   1          /* ========================================
   2           *
   3           * Copyright QMAX TEST EQUIPMENTS, 2014
   4           * All Rights Reserved
   5           * UNPUBLISHED, LICENSED SOFTWARE.
   6           * AUTHOR : RAVIVARMAN.R
   7           * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8           * WHICH IS THE PROPERTY OF QMAX TEST EQUIPMENTS.
   9           * CHANGED : 14TH FEB - D-FLIP_FLOP & BUFFERS
  10           * ========================================
  11          */
  12          #include <device.h>
  13          
  14          void main()
  15          {
  16   1              uint8 m_u8MOSI=0,m_u8WRData=0;
  17   1              uint8 m_u8RLStatus[7];
  18   1              uint8 m_u8MISO=0;
  19   1              uint8 m_u8MOSI2=0;
  20   1              uint8 readStatus=0;
  21   1              SPIS_Start();
  22   1              
  23   1              /* Initializations */
  24   1              /* Clear All Relays */
  25   1              CyPins_ClearPin(RL1_CTR_P0_2);
  26   1              CyPins_ClearPin(RL2_CTR_P0_1);
  27   1              CyPins_ClearPin(RL3_CTR_P0_0);
  28   1              CyPins_ClearPin(RL4_CTR_P4_1);
  29   1              CyPins_ClearPin(RL5_CTR_P4_0);
  30   1              CyPins_ClearPin(RL6_CTR_P12_3);
  31   1              CyPins_ClearPin(RL7_CTR_P12_2);
  32   1                              
  33   1              /* Set AC & DC Voltage as Default */
  34   1              CyPins_SetPin(RL2_CTR_P0_1);
  35   1              
  36   1          CyGlobalIntEnable;
  37   1              SPIS_ClearRxBuffer();
  38   1          for(;;)
  39   1          {
  40   2              if(CyPins_ReadPin(ISO_DI0_P15_3)!=0)
  41   2              {       
  42   3              
  43   3              for(m_u8WRData=0;m_u8WRData<10;m_u8WRData++){
  44   4                      SPIS_WriteTxData(m_u8WRData);
  45   4                      while(!(SPIS_ReadTxStatus() & SPIS_STS_TX_FIFO_EMPTY));
  46   4              }
  47   3      //      while(!(SPIS_ReadRxStatus() & SPIS_STS_RX_FIFO_EMPTY)){
  48   3      //              m_u8MOSI=SPIS_ReadRxData();       /* Read SPI Data */ 
  49   3      //              SPIS_ClearRxBuffer();
  50   3      //      }
  51   3      //
  52   3      //                      if(m_u8MOSI == 0x80)            /* Read Buffer */
  53   3      //                      {
C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 2   

  54   3      //                              if(CyPins_ReadPin(RL1_CTR_P0_2)!=0)
  55   3      //                                      m_u8RLStatus[0]=0x1;
  56   3      //                              else
  57   3      //                                      m_u8RLStatus[0]=0;
  58   3      //                              CyDelayUs(10);
  59   3      //                              if(CyPins_ReadPin(RL2_CTR_P0_1)!=0)
  60   3      //                                      m_u8RLStatus[1]=0x2;
  61   3      //                              else
  62   3      //                                      m_u8RLStatus[1]=0;
  63   3      //                              CyDelayUs(10);// 10 micro seconds delay
  64   3      //                              if(CyPins_ReadPin(RL3_CTR_P0_0)!=0)
  65   3      //                                      m_u8RLStatus[2]=0x4;
  66   3      //                              else
  67   3      //                                      m_u8RLStatus[2]=0;
  68   3      //                              CyDelayUs(10);// 10 micro seconds delay
  69   3      //                              if(CyPins_ReadPin(RL4_CTR_P4_1)!=0)
  70   3      //                                      m_u8RLStatus[3]=0x8;
  71   3      //                              else
  72   3      //                                      m_u8RLStatus[3]=0;
  73   3      //                              CyDelayUs(10);// 10 micro seconds delay
  74   3      //                              if(CyPins_ReadPin(RL5_CTR_P4_0)!=0)
  75   3      //                                      m_u8RLStatus[4]=0x16;
  76   3      //                              else
  77   3      //                                      m_u8RLStatus[4]=0;
  78   3      //                              CyDelayUs(10);// 10 micro seconds delay
  79   3      //                              if(CyPins_ReadPin(RL6_CTR_P12_3)!=0)
  80   3      //                                      m_u8RLStatus[5]=0x32;
  81   3      //                              else
  82   3      //                                      m_u8RLStatus[5]=0;
  83   3      //                              CyDelayUs(10);// 10 micro seconds delay
  84   3      //                              if(CyPins_ReadPin(RL7_CTR_P12_2)!=0)
  85   3      //                                      m_u8RLStatus[6]=0x64;
  86   3      //                              else
  87   3      //                                      m_u8RLStatus[6]=0;
  88   3      //                              CyDelayUs(10);// 10 micro seconds delay
  89   3      //                              
  90   3      //                              m_u8MISO = m_u8RLStatus[0] | m_u8RLStatus[1] | m_u8RLStatus[2] | m_u8RLStatus[3] | m_u8RLStatus[4] |
             - m_u8RLStatus[5] | m_u8RLStatus[6] ;
  91   3      //                                      
  92   3      //                              SPIS_ClearTxBuffer();
  93   3      //                              SPIS_WriteTxData(m_u8MISO);
  94   3      //                              while(!(SPIS_ReadTxStatus() & SPIS_STS_TX_FIFO_EMPTY));
  95   3      //                      }
  96   3      //                      else                                                    /* Write Mode */
  97   3      //                      {
  98   3      //                              m_u8WRData = m_u8MOSI & 0x07;
  99   3      //                              switch(m_u8WRData)
 100   3      //                              {
 101   3      //                                      case 0x00:                                                                      //ACV & DCV Mode
 102   3      //                                              CyPins_ClearPin(RL1_CTR_P0_2);
 103   3      //                                              CyPins_SetPin(RL2_CTR_P0_1);
 104   3      //                                              CyPins_ClearPin(RL3_CTR_P0_0);
 105   3      //                                              CyPins_ClearPin(RL4_CTR_P4_1);
 106   3      //                                              CyPins_ClearPin(RL5_CTR_P4_0);
 107   3      //                                              CyPins_ClearPin(RL6_CTR_P12_3);
 108   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 109   3      //                                              CyDelay(10);// 10 milli seconds delay
 110   3      //                                      break;
 111   3      //
 112   3      //                                      case 0x01:                                                                      //ACmV & DCmV Mode
 113   3      //                                              CyPins_SetPin(RL1_CTR_P0_2);
 114   3      //                                              CyPins_ClearPin(RL2_CTR_P0_1);
C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 3   

 115   3      //                                              CyPins_ClearPin(RL3_CTR_P0_0);
 116   3      //                                              CyPins_ClearPin(RL4_CTR_P4_1);
 117   3      //                                              CyPins_ClearPin(RL5_CTR_P4_0);
 118   3      //                                              CyPins_ClearPin(RL6_CTR_P12_3);
 119   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 120   3      //                                              CyDelay(10);// 10 milli seconds delay
 121   3      //                                      break;
 122   3      //                                      case 0x02:                                                                      //ACI & DCI Mode        -       Amps
 123   3      //                                              CyPins_ClearPin(RL1_CTR_P0_2);
 124   3      //                                              CyPins_ClearPin(RL2_CTR_P0_1);
 125   3      //                                              CyPins_ClearPin(RL3_CTR_P0_0);
 126   3      //                                              CyPins_ClearPin(RL4_CTR_P4_1);
 127   3      //                                              CyPins_ClearPin(RL5_CTR_P4_0);
 128   3      //                                              CyPins_SetPin(RL6_CTR_P12_3);
 129   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 130   3      //                                              CyDelay(10);// 10 milli seconds delay
 131   3      //                                      break;
 132   3      //                                      case 0x03:                                                                      //ACI & DCI Mode        -       mA
 133   3      //                                              CyPins_ClearPin(RL1_CTR_P0_2);
 134   3      //                                              CyPins_ClearPin(RL2_CTR_P0_1);
 135   3      //                                              CyPins_ClearPin(RL3_CTR_P0_0);
 136   3      //                                              CyPins_ClearPin(RL4_CTR_P4_1);
 137   3      //                                              CyPins_SetPin(RL5_CTR_P4_0);
 138   3      //                                              CyPins_ClearPin(RL6_CTR_P12_3);
 139   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 140   3      //                                              CyDelay(10);// 10 milli seconds delay
 141   3      //                                      break;
 142   3      //                                      case 0x04:                                                                      //ACI & DCI Mode        -       uA
 143   3      //                                              CyPins_ClearPin(RL1_CTR_P0_2);
 144   3      //                                              CyPins_ClearPin(RL2_CTR_P0_1);
 145   3      //                                              CyPins_ClearPin(RL3_CTR_P0_0);
 146   3      //                                              CyPins_SetPin(RL4_CTR_P4_1);
 147   3      //                                              CyPins_ClearPin(RL5_CTR_P4_0);
 148   3      //                                              CyPins_ClearPin(RL6_CTR_P12_3);
 149   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 150   3      //                                              CyDelay(10);// 10 milli seconds delay
 151   3      //                                      break;
 152   3      //                                      case 0x05:                                                                      //Resistor,Continuity,Diode&Capacitor
 153   3      //                                              CyPins_SetPin(RL1_CTR_P0_2);
 154   3      //                                              CyPins_ClearPin(RL2_CTR_P0_1);
 155   3      //                                              CyPins_ClearPin(RL3_CTR_P0_0);
 156   3      //                                              CyPins_ClearPin(RL4_CTR_P4_1);
 157   3      //                                              CyPins_ClearPin(RL5_CTR_P4_0);
 158   3      //                                              CyPins_ClearPin(RL6_CTR_P12_3);
 159   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 160   3      //                                              CyDelay(10);// 10 milli seconds delay
 161   3      //                                      break;
 162   3      //                                      case 0x06:                                                                      //Frequency
 163   3      //                                              CyPins_SetPin(RL1_CTR_P0_2);
 164   3      //                                              CyPins_ClearPin(RL2_CTR_P0_1);
 165   3      //                                              CyPins_SetPin(RL3_CTR_P0_0);
 166   3      //                                              CyPins_ClearPin(RL4_CTR_P4_1);
 167   3      //                                              CyPins_ClearPin(RL5_CTR_P4_0);
 168   3      //                                              CyPins_ClearPin(RL6_CTR_P12_3);
 169   3      //                                              CyPins_ClearPin(RL7_CTR_P12_2);
 170   3      //                                              CyDelay(10);// 10 milli seconds delay
 171   3      //                                      break;
 172   3      //                                      case 0x07:
 173   3      //                                              break;
 174   3      //                              }
 175   3      //                              
 176   3      //                              if(CyPins_ReadPin(RL1_CTR_P0_2)!=0)
C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 4   

 177   3      //                                      m_u8RLStatus[0]=0x1;
 178   3      //                              else
 179   3      //                                      m_u8RLStatus[0]=0;
 180   3      //                              CyDelayUs(10);
 181   3      //                              if(CyPins_ReadPin(RL2_CTR_P0_1)!=0)
 182   3      //                                      m_u8RLStatus[1]=0x2;
 183   3      //                              else
 184   3      //                                      m_u8RLStatus[1]=0;
 185   3      //                              CyDelayUs(10);// 10 micro seconds delay
 186   3      //                              if(CyPins_ReadPin(RL3_CTR_P0_0)!=0)
 187   3      //                                      m_u8RLStatus[2]=0x4;
 188   3      //                              else
 189   3      //                                      m_u8RLStatus[2]=0;
 190   3      //                              CyDelayUs(10);// 10 micro seconds delay
 191   3      //                              if(CyPins_ReadPin(RL4_CTR_P4_1)!=0)
 192   3      //                                      m_u8RLStatus[3]=0x8;
 193   3      //                              else
 194   3      //                                      m_u8RLStatus[3]=0;
 195   3      //                              CyDelayUs(10);// 10 micro seconds delay
 196   3      //                              if(CyPins_ReadPin(RL5_CTR_P4_0)!=0)
 197   3      //                                      m_u8RLStatus[4]=0x16;
 198   3      //                              else
 199   3      //                                      m_u8RLStatus[4]=0;
 200   3      //                              CyDelayUs(10);// 10 micro seconds delay
 201   3      //                              if(CyPins_ReadPin(RL6_CTR_P12_3)!=0)
 202   3      //                                      m_u8RLStatus[5]=0x32;
 203   3      //                              else
 204   3      //                                      m_u8RLStatus[5]=0;
 205   3      //                              CyDelayUs(10);// 10 micro seconds delay
 206   3      //                              if(CyPins_ReadPin(RL7_CTR_P12_2)!=0)
 207   3      //                                      m_u8RLStatus[6]=0x64;
 208   3      //                              else
 209   3      //                                      m_u8RLStatus[6]=0;
 210   3      //                              CyDelayUs(10);// 10 micro seconds delay
 211   3      //                              
 212   3      //                              m_u8MISO = m_u8RLStatus[0] | m_u8RLStatus[1] | m_u8RLStatus[2] | m_u8RLStatus[3] | m_u8RLStatus[4] |
             - m_u8RLStatus[5] | m_u8RLStatus[6] ;
 213   3      //                              
 214   3      //                              //SPIS_ClearTxBuffer();
 215   3      //                              SPIS_WriteTxData(m_u8MISO);
 216   3      //                              while(!(SPIS_ReadTxStatus() & SPIS_STS_TX_FIFO_EMPTY));
 217   3      //                      }
 218   3      //              
 219   3                      }
 220   2          }
 221   1      }
*** WARNING C280 IN LINE 17 OF .\main.c: 'm_u8RLStatus': unreferenced local variable
 222          
 223          /* [] END OF FILE */
C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 5   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION main (BEGIN)
                                           ; SOURCE LINE # 14
                                           ; SOURCE LINE # 15
                                           ; SOURCE LINE # 16
0000 900000      R     MOV     DPTR,#m_u8MOSI
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#m_u8WRData
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 18
000A 900000      R     MOV     DPTR,#m_u8MISO
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 19
000F 900000      R     MOV     DPTR,#m_u8MOSI2
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 20
0014 900000      R     MOV     DPTR,#readStatus
0017 E4                CLR     A
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 21
0019 120000      E     LCALL   SPIS_Start
                                           ; SOURCE LINE # 25
001C 905002            MOV     DPTR,#05002H
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 54FE              ANL     A,#0FEH
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 26
0027 905001            MOV     DPTR,#05001H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54FE              ANL     A,#0FEH
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 27
0032 905000            MOV     DPTR,#05000H
0035 E0                MOVX    A,@DPTR
0036 FF                MOV     R7,A
0037 EF                MOV     A,R7
0038 54FE              ANL     A,#0FEH
003A FF                MOV     R7,A
003B EF                MOV     A,R7
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 28
003D 905021            MOV     DPTR,#05021H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 54FE              ANL     A,#0FEH
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 6   

0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 29
0048 905020            MOV     DPTR,#05020H
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D EF                MOV     A,R7
004E 54FE              ANL     A,#0FEH
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 30
0053 905063            MOV     DPTR,#05063H
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 54FE              ANL     A,#0FEH
005B FF                MOV     R7,A
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 31
005E 905062            MOV     DPTR,#05062H
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 54FE              ANL     A,#0FEH
0066 FF                MOV     R7,A
0067 EF                MOV     A,R7
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 34
0069 905001            MOV     DPTR,#05001H
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 4401              ORL     A,#01H
0071 FF                MOV     R7,A
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
0074 D2AF              SETB    EA
0076 9044F4            MOV     DPTR,#044F4H
0079 E0                MOVX    A,@DPTR
007A FF                MOV     R7,A
007B EF                MOV     A,R7
007C 54FD              ANL     A,#0FDH
007E FF                MOV     R7,A
007F EF                MOV     A,R7
0080 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
0081 120000      E     LCALL   SPIS_ClearRxBuffer
                                           ; SOURCE LINE # 38
0084         ?C0001:
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0084 90507B            MOV     DPTR,#0507BH
0087 E0                MOVX    A,@DPTR
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A 5410              ANL     A,#010H
008C FF                MOV     R7,A
008D 7E00              MOV     R6,#00H
008F EF                MOV     A,R7
0090 4E                ORL     A,R6
C51 COMPILER V9.03   MAIN                                                                  02/17/2014 10:42:08 PAGE 7   

0091 60F1              JZ      ?C0001
                                           ; SOURCE LINE # 41
                                           ; SOURCE LINE # 43
0093 900000      R     MOV     DPTR,#m_u8WRData
0096 E4                CLR     A
0097 F0                MOVX    @DPTR,A
0098         ?C0004:
0098 900000      R     MOV     DPTR,#m_u8WRData
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E C3                CLR     C
009F 940A              SUBB    A,#0AH
00A1 50E1              JNC     ?C0001
                                           ; SOURCE LINE # 44
00A3 900000      R     MOV     DPTR,#m_u8WRData
00A6 E0                MOVX    A,@DPTR
00A7 FF                MOV     R7,A
00A8 7E00              MOV     R6,#00H
00AA 120000      E     LCALL   _SPIS_WriteTxData
00AD         ?C0007:
                                           ; SOURCE LINE # 45
00AD 120000      E     LCALL   SPIS_ReadTxStatus
00B0 7E00              MOV     R6,#00H
00B2 EF                MOV     A,R7
00B3 30E2F7            JNB     ACC.2,?C0007
00B6         ?C0008:
                                           ; SOURCE LINE # 46
00B6         ?C0006:
00B6 900000      R     MOV     DPTR,#m_u8WRData
00B9 E0                MOVX    A,@DPTR
00BA 04                INC     A
00BB F0                MOVX    @DPTR,A
00BC 80DA              SJMP    ?C0004
00BE 22                RET     
             ; FUNCTION main (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    191    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      12
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
