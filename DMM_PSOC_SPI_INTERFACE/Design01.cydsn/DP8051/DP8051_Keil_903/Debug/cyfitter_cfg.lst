C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst) CD DB
                    - NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.0 Component Pack 3
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.
   8          *
   9          * THIS FILE SHOULD NOT BE MODIFIED.
  10          *
  11          ********************************************************************************
  12          * Copyright 2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include <cytypes.h>
  20          #include <cydevice_trm.h>
  21          #include <cyfitter.h>
  22          #include <CyLib.h>
  23          #include <CyDmac.h>
  24          #include <cyfitter_cfg.h>
  25          
  26          /* Clock startup error codes                                                   */
  27          #define CYCLOCKSTART_NO_ERROR    0
  28          #define CYCLOCKSTART_XTAL_ERROR  1
  29          #define CYCLOCKSTART_32KHZ_ERROR 2
  30          #define CYCLOCKSTART_PLL_ERROR   3
  31          
  32          /*******************************************************************************
  33          * Function Name: CyClockStartupError
  34          ********************************************************************************
  35          * Summary:
  36          *  If an error is encountered during clock configuration (crystal startup error,
  37          *  PLL lock error, etc) the system will end up here.  Unless reimplemented by 
  38          *  the customer, an infinite loop will be encountered.
  39          *
  40          * Parameters:  
  41          *   void
  42          *
  43          * Return:
  44          *   void
  45          *
  46          *******************************************************************************/
  47          #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
  50          static void CyClockStartupError(uint8 errorCode)
  51          {
  52   1          /* To remove the compiler warning if errorCode not used.                */
  53   1          errorCode = errorCode;
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 2   

  54   1      
  55   1          /* `#START CyClockStartupError` */
  56   1      
  57   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  58   1          /* we will end up here to allow the customer to implement something to  */
  59   1          /* deal with the clock condition.                                       */
  60   1      
  61   1          /* `#END` */
  62   1      
  63   1          /* If nothing else, stop here since the clocks have not started         */
  64   1          /* correctly.                                                           */
  65   1          while(1) {}
  66   1      }
  67          
  68          
  69          #undef CYCODE
  70          #undef CYDATA
  71          #undef CYXDATA
  72          #undef CYFAR
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYCODE code
  75                  #define CYDATA data
  76                  #define CYXDATA xdata
  77                  #define CYFAR far
  78          
  79                  #define CYPACKED
  80                  #define CYALIGNED
  81              #define DMAINITSEC
  82                  #define CY_CFG_MEMORY_BARRIER()
  83          
  84                  #ifndef CYCONFIGCPY_DECLARED
                              extern void cymemzero(void CYFAR *addr, uint16 size);
                              extern void cyconfigcpy(uint16 size, const void CYFAR *src, void CYFAR *dest) small;
                              extern void cyconfigcpycode(uint16 size, const void CYCODE *src, void CYFAR *dest);
                      #endif
  89          
  90          
  91                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  92                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  93                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  94          #else
                      #error Unsupported toolchain
              #endif
  97          
  98          /* Defines the layout and meaning of each entry in the cfg_memset_list used for clearing registers */
  99          typedef struct {
 100                  void CYFAR *address;
 101                  uint16 size;
 102          } CYPACKED cfg_memset_t;
 103          
 104          /* Defines the layout and meaning of each entry in the cfg_memcpy_list used for initializing registers */
 105          typedef struct {
 106                  void CYFAR *dest;
 107                  const void CYFAR *src;
 108                  uint16 size;
 109          } CYPACKED cfg_memcpy_t;
 110          
 111          /* TD structure for big-endian systems. Requires 2-byte endian swap */
 112          struct td_t {
 113                  uint16 size;
 114                  uint8 flags;
 115                  uint8 next_td_ptr;
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 3   

 116                  uint16 src;
 117                  uint16 dest;
 118          } CYPACKED;
 119          
 120          /* IOPORT_3 Address: CYDEV_PRTDSI_PRT3_BASE Size (bytes): 7 */
 121          #define BS_IOPORT_3_VAL ((const uint8 CYFAR *)0x00080000)
 122          
 123          /* IOPORT_5 Address: CYDEV_PRTDSI_PRT5_BASE Size (bytes): 7 */
 124          #define BS_IOPORT_5_VAL ((const uint8 CYFAR *)0x00080008)
 125          
 126          /* IOPORT_8 Address: CYDEV_PRTDSI_PRT15_BASE Size (bytes): 7 */
 127          #define BS_IOPORT_8_VAL ((const uint8 CYFAR *)0x00080010)
 128          
 129          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
 130          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)0x00080018)
 131          
 132          /* UDB_1_2_1_CONFIG Address: CYDEV_UCFG_B0_P3_U0_BASE Size (bytes): 128 */
 133          #define BS_UDB_1_2_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080020)
 134          
 135          /* UDB_1_2_0_CONFIG Address: CYDEV_UCFG_B0_P3_U1_BASE Size (bytes): 128 */
 136          #define BS_UDB_1_2_0_CONFIG_VAL ((const uint8 CYFAR *)0x000800A0)
 137          
 138          /* UDB_1_0_0_CONFIG Address: CYDEV_UCFG_B1_P2_U0_BASE Size (bytes): 128 */
 139          #define BS_UDB_1_0_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080120)
 140          
 141          /* UDB_1_0_1_CONFIG Address: CYDEV_UCFG_B1_P2_U1_BASE Size (bytes): 128 */
 142          #define BS_UDB_1_0_1_CONFIG_VAL ((const uint8 CYFAR *)0x000801A0)
 143          
 144          /* UDB_1_1_1_CONFIG Address: CYDEV_UCFG_B1_P3_U0_BASE Size (bytes): 128 */
 145          #define BS_UDB_1_1_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080220)
 146          
 147          /* UDB_1_1_0_CONFIG Address: CYDEV_UCFG_B1_P3_U1_BASE Size (bytes): 128 */
 148          #define BS_UDB_1_1_0_CONFIG_VAL ((const uint8 CYFAR *)0x000802A0)
 149          
 150          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070 Size (bytes): 32 */
 151          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x00080320)
 152          
 153          /* UWRK_B1_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B1_BASE + 0x00000070 Size (bytes): 32 */
 154          #define BS_UWRK_B1_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x00080340)
 155          
 156          /* DSISWITCH_0_0 Address: CYDEV_UCFG_DSI13_BASE Size (bytes): 128 */
 157          #define BS_DSISWITCH_0_0_VAL ((const uint8 CYFAR *)0x00080360)
 158          
 159          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080 Size (bytes): 128 */
 160          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000803E0)
 161          
 162          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 163          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080460)
 164          
 165          /* UDBSWITCH_1_0 Address: CYDEV_UCFG_B1_P2_ROUTE_BASE Size (bytes): 128 */
 166          #define BS_UDBSWITCH_1_0_VAL ((const uint8 CYFAR *)0x000804E0)
 167          
 168          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 169          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080560)
 170          
 171          /* UDBSWITCH_1_1 Address: CYDEV_UCFG_B1_P3_ROUTE_BASE Size (bytes): 128 */
 172          #define BS_UDBSWITCH_1_1_VAL ((const uint8 CYFAR *)0x000805E0)
 173          
 174          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 175          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080660)
 176          
 177          /* UDBSWITCH_1_2 Address: CYDEV_UCFG_B0_P3_ROUTE_BASE Size (bytes): 128 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 4   

 178          #define BS_UDBSWITCH_1_2_VAL ((const uint8 CYFAR *)0x000806E0)
 179          
 180          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 181          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080760)
 182          
 183          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 184          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x000807E0)
 185          
 186          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080 Size (bytes): 128 */
 187          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080860)
 188          
 189          /* DSISWITCH_1_1 Address: CYDEV_UCFG_DSI8_BASE Size (bytes): 128 */
 190          #define BS_DSISWITCH_1_1_VAL ((const uint8 CYFAR *)0x000808E0)
 191          
 192          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080 Size (bytes): 128 */
 193          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080960)
 194          
 195          /* DSISWITCH_1_2 Address: CYDEV_UCFG_DSI3_BASE Size (bytes): 128 */
 196          #define BS_DSISWITCH_1_2_VAL ((const uint8 CYFAR *)0x000809E0)
 197          
 198          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080 Size (bytes): 128 */
 199          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080A60)
 200          
 201          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 202          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)0x00080AE0)
 203          
 204          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 205          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x00080AF0)
 206          
 207          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 208          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080B00)
 209          
 210          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 211          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)0x00080B08)
 212          
 213          /* IOPINS0_8 Address: CYREG_PRT15_DM0 Size (bytes): 8 */
 214          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)0x00080B10)
 215          
 216          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
 217          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x00080B18)
 218          
 219          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
 220          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x00080B20)
 221          
 222          /* IOPINS0_5 Address: CYREG_PRT5_DR Size (bytes): 10 */
 223          #define BS_IOPINS0_5_VAL ((const uint8 CYFAR *)0x00080B28)
 224          
 225          
 226          /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 227          static const uint8 CYCODE CH1_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
             -;
 228          
 229          /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 230          static const uint8 CYCODE CH2_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 }
             -;
 231          
 232          /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 233          static const uint8 CYCODE CH5_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 }
             -;
 234          
 235          /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 236          static const uint8 CYCODE CH6_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00 }
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 5   

             -;
 237          
 238          /* Initialization data for each DMA channel's TD registers */
 239          static const uint8 CYCODE DMA_TD_START_CMD[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x01 };
 240          
 241          static uint32 CYXDATA DMA_ZERO_VAL CYALIGNED;
 242          
 243          /* This table holds all of the initialization data necessary for the DMA
 244             process to transfer data from the source location to the destination. */
 245          static const struct td_t CYCODE CFG_TD_LIST0[] DMAINITSEC = {
 246          /* Size, Flags, Next, Source, Destination */
 247                  { 8, 0x23, 0x02, (uint16)(&CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },        /* TD 1 */
 248                  { 8, 0x23, 0x03, (uint16)(&CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },        /* TD 2 */
 249                  { 8, 0x23, 0x04, (uint16)(&CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },        /* TD 3 */
 250                  { 8, 0x23, 0x05, (uint16)(&CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },        /* TD 4 */
 251                  { 5, 0x23, 0x06, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },     /* TD 5 */
 252                  { 5, 0x23, 0x07, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },     /* TD 6 */
 253                  { 5, 0x23, 0x08, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },     /* TD 7 */
 254                  { 5, 0x23, 0xFE, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },     /* TD 8 */
 255                  { 32, 0x22, 0x0A, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT1_DR) },   /* TD 9 */
 256                  { 16, 0x22, 0xFE, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT6_DR) },   /* TD 10 */
 257                  { 1536, 0x22, 0x0C, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },      /* TD 11 */
 258                  { 2048, 0x22, 0x0D, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },      /* TD 12 */
 259                  { 896, 0x22, 0x0E, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },       /* TD 13 */
 260                  { 768, 0x22, 0x0F, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },   /* TD 14 */
 261                  { 1024, 0x22, 0x10, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },  /* TD 15 */
 262                  { 256, 0x22, 0xFE, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },  /* TD 16 */
 263                  { 7, 0x23, 0x12, (uint16)(BS_IOPORT_3_VAL), (uint16)(CYDEV_PRTDSI_PRT3_BASE) }, /* TD 17 */
 264                  { 7, 0x23, 0x13, (uint16)(BS_IOPORT_5_VAL), (uint16)(CYDEV_PRTDSI_PRT5_BASE) }, /* TD 18 */
 265                  { 7, 0x23, 0x14, (uint16)(BS_IOPORT_8_VAL), (uint16)(CYDEV_PRTDSI_PRT15_BASE) },        /* TD 19 */
 266                  { 32, 0x23, 0x15, (uint16)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BASE + 0x000000
             -70) },        /* TD 20 */
 267                  { 32, 0x23, 0xFE, (uint16)(BS_UWRK_B1_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B1_BASE + 0x000000
             -70) },        /* TD 21 */
 268                  { 8, 0x23, 0x17, (uint16)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },  /* TD 22 */
 269                  { 128, 0x23, 0x18, (uint16)(BS_UDB_1_2_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },     /* TD 23 */
 270                  { 128, 0x23, 0x19, (uint16)(BS_UDB_1_2_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P3_U1_BASE) },     /* TD 24 */
 271                  { 128, 0x23, 0x1A, (uint16)(BS_UDB_1_0_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },     /* TD 25 */
 272                  { 128, 0x23, 0x1B, (uint16)(BS_UDB_1_0_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P2_U1_BASE) },     /* TD 26 */
 273                  { 128, 0x23, 0x1C, (uint16)(BS_UDB_1_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },     /* TD 27 */
 274                  { 128, 0x23, 0x1D, (uint16)(BS_UDB_1_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U1_BASE) },     /* TD 28 */
 275                  { 128, 0x23, 0x1E, (uint16)(BS_DSISWITCH_0_0_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },   /* TD 29 */
 276                  { 128, 0x23, 0x1F, (uint16)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x00000080) },  /*
             - TD 30 */
 277                  { 128, 0x23, 0x20, (uint16)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080
             -) },        /* TD 31 */
 278                  { 128, 0x23, 0x21, (uint16)(BS_UDBSWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE) },     /* TD 32 */
 279                  { 128, 0x23, 0x22, (uint16)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 33 */
 280                  { 128, 0x23, 0x23, (uint16)(BS_UDBSWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE) },     /* TD 34 */
 281                  { 128, 0x23, 0x24, (uint16)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 35 */
 282                  { 128, 0x23, 0x25, (uint16)(BS_UDBSWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE) },     /* TD 36 */
 283                  { 128, 0x23, 0x26, (uint16)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 37 */
 284                  { 128, 0x23, 0x27, (uint16)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) },    /* TD 38 */
 285                  { 128, 0x23, 0x28, (uint16)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x00000080) },   /* 
             -TD 39 */
 286                  { 128, 0x23, 0x29, (uint16)(BS_DSISWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) },    /* TD 40 */
 287                  { 128, 0x23, 0x2A, (uint16)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x00000080) },   /* 
             -TD 41 */
 288                  { 128, 0x23, 0x2B, (uint16)(BS_DSISWITCH_1_2_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) },    /* TD 42 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 6   

 289                  { 128, 0x23, 0x2C, (uint16)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x00000080) },   /* 
             -TD 43 */
 290                  { 16, 0x23, 0x2D, (uint16)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },        /* TD 44 */
 291                  { 16, 0x23, 0xFE, (uint16)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },        /* TD 45 */
 292          };
 293          /*******************************************************************************
 294          * Function Name: cfg_dma_init
 295          ********************************************************************************
 296          * Summary:
 297          *  This function is used to copy device configuration data from constant values
 298          *  stored in memory into the proper chip configuration registers using DMA.  It
 299          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 300          *
 301          * Parameters:  
 302          *   void
 303          *
 304          * Return:
 305          *   void
 306          *
 307          *******************************************************************************/
 308          static void cfg_dma_init(void)
 309          {
 310   1              DMA_ZERO_VAL = 0u;
 311   1              DMAC_CFGMEM[0].CFG0[0] = 0x10;          /* set burstcount */
 312   1              DMAC_CH[0].basic_cfg[0] = 0x01u;        /* enable channel0 */
 313   1              DMAC_CH[0].basic_status[1] = 0;         /* set channel0's first td to 0 */
 314   1              
 315   1              DMAC_TDMEM[0].TD0[2] = 0x01;            /* set td0's next td to 1 */
 316   1              DMAC_TDMEM[0].TD0[3] = 0xA3;            /* set td0's flags */
 317   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD0[0], 45*8);                                    /* set td0's size */
 318   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[0], (uint16)(uint32)CFG_TD_LIST0);    /* set td0's src addr */
 319   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[2], CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst addr */
 320   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[0], (uint16)(CYDEV_FLS_BASE >> 16));                                /* set ch0's src high
             - addr */
 321   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[2], (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));                                /* set ch0's 
             -dst high addr */
 322   1              DMAC_CH[1].basic_status[1] = 0x09; /* First TD = 9 */
 323   1              DMAC_CH[2].basic_status[1] = 0x0B; /* First TD = 11 */
 324   1              DMAC_CH[5].basic_status[1] = 0x11; /* First TD = 17 */
 325   1              DMAC_CH[6].basic_status[1] = 0x16; /* First TD = 22 */
 326   1      
 327   1              CY_CFG_MEMORY_BARRIER();
 328   1              DMAC_CH[0].action[0] = CPU_REQ;    /* initiate the DMA transfer */
 329   1              CY_CFG_MEMORY_BARRIER();
 330   1      
 331   1              /* Wait for all DMA transfers to complete */
 332   1              while((CY_GET_REG8(CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 333   1              while((CY_GET_REG8(CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 334   1              while((CY_GET_REG8(CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 335   1              while((CY_GET_REG8(CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 336   1              while((CY_GET_REG8(CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 337   1      
 338   1      
 339   1      }
 340          /*******************************************************************************
 341          * Function Name: ClockSetup
 342          ********************************************************************************
 343          *
 344          * Summary:
 345          *  Performs the initialization of all of the clocks in the device based on the
 346          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 347          *  clocks and setting the necessary dividers to produce the desired frequency. 
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 7   

 348          *
 349          * Parameters:
 350          *  void
 351          *
 352          * Return:
 353          *  void
 354          *
 355          *******************************************************************************/
 356          static void ClockSetup(void)
 357          {
 358   1              reg32  timeout;
 359   1              reg32* timeout_p = &timeout;
 360   1              reg8   pllLock;
 361   1      
 362   1      
 363   1              /* Configure Digital Clocks based on settings from Clock DWR */
 364   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x180001);
 365   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x180017);
 366   1      
 367   1              /* Configure ILO based on settings from Clock DWR */
 368   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02);
 369   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08);
 370   1      
 371   1              /* Configure IMO based on settings from Clock DWR */
 372   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03);
 373   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8(CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)));
 374   1      
 375   1              /* Configure PLL based on settings from Clock DWR */
 376   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008);
 377   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051);
 378   1              /* Wait up to 250us for the PLL to lock */
 379   1              pllLock = 0;
 380   1              for (timeout = 250 / 10; *timeout_p && (pllLock != 0x03u); timeout--) { 
 381   2                      pllLock = 0x03u & ((pllLock << 1) | ((CY_GET_REG8(CYREG_FASTCLK_PLL_SR) & 0x01u) >> 0));
 382   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 383   2              }
 384   1      
 385   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 386   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0103);
 387   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 388   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07);
 389   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00);
 390   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48);
 391   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 392   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02);
 393   1      
 394   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8(CYREG_PM_ACT_CFG2) | 0x03)));
 395   1      }
 396          
 397          
 398          /* Analog API Functions */
 399          
 400          /*******************************************************************************
 401          * Function Name: AnalogSetDefault
 402          ********************************************************************************
 403          *
 404          * Summary:
 405          *  Sets up the analog portions of the chip to default values based on chip
 406          *  configuration options from the project.
 407          *
 408          * Parameters:
 409          *  void
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 8   

 410          *
 411          * Return:
 412          *  void
 413          *
 414          *******************************************************************************/
 415          void AnalogSetDefault(void)
 416          {
 417   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u);
 418   1              CY_SET_REG8(CYREG_BG_DFT0, bg_xover_inl_trim & 0x07u);
 419   1              CY_SET_REG8(CYREG_BG_DFT1, (bg_xover_inl_trim >> 4) & 0x0Fu);
 420   1              CY_SET_REG8(CYREG_PUMP_CR0, 0x44);
 421   1      }
 422          
 423          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 424          
 425          
 426          /*******************************************************************************
 427          * Function Name: cyfitter_cfg
 428          ********************************************************************************
 429          * Summary:
 430          *  This function is called by the start-up code for the selected device. It
 431          *  performs all of the necessary device configuration based on the design
 432          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 433          *  as Clocks and Pins as well as any component configuration that is necessary.
 434          *
 435          * Parameters:  
 436          *   void
 437          *
 438          * Return:
 439          *   void
 440          *
 441          *******************************************************************************/
 442          void cyfitter_cfg(void)
 443          {
 444   1              /* Setup Flash Cycles based on 48MHz clock startup frequency. */
 445   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xF1 : 0xC0));
 446   1              {
 447   2                      cfg_dma_init();
 448   2      
 449   2                      /* Enable digital routing */
 450   2                      CY_SET_XTND_REG8(CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL0_BANK_CTL) | 0x02u);
 451   2                      CY_SET_XTND_REG8(CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL1_BANK_CTL) | 0x02u);
 452   2      
 453   2                      /* Enable UDB array */
 454   2                      CY_SET_REG8(CYREG_PM_ACT_CFG0, CY_GET_REG8(CYREG_PM_ACT_CFG0) | 0x40u);
 455   2                      CY_SET_REG8(CYREG_PM_AVAIL_CR2, CY_GET_REG8(CYREG_PM_AVAIL_CR2) | 0x10u);
 456   2              }
 457   1      
 458   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 459   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (void CYFAR *)(BS_IOPINS0_0_VAL), 8);
 460   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (void CYFAR *)(BS_IOPINS0_7_VAL), 8);
 461   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DM0), (void CYFAR *)(BS_IOPINS0_8_VAL), 8);
 462   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (void CYFAR *)(BS_IOPINS0_3_VAL), 8);
 463   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (void CYFAR *)(BS_IOPINS0_4_VAL), 8);
 464   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT5_DR), (void CYFAR *)(BS_IOPINS0_5_VAL), 10);
 465   1              CY_SET_XTND_REG8((void CYFAR *)(CYREG_B1_P2_U1_CFG27), 0x44);
 466   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01);
 467   1              CY_SET_REG8((void CYXDATA *)(CYREG_PWRSYS_WAKE_TR2), 0x3A);
 468   1      
 469   1      
 470   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 9   

 471   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x31 : 0x00));
 472   1              /* Setup clocks based on selections from Clock DWR */
 473   1              ClockSetup();
 474   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 475   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0xB1 : 0x80));
 476   1      
 477   1              /* Perform basic analog initialization to defaults */
 478   1              AnalogSetDefault();
 479   1      
 480   1              /* Configure alternate active mode */
 481   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (void CYFAR *)CYDEV_PM_ACT_BASE, 14);
 482   1              CY_SET_REG8(CYREG_PM_STBY_CFG0, CY_GET_REG8(CYREG_PM_STBY_CFG0) & ~0x02u);      /* Disable CPU */
 483   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 50
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 65
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 308
                                           ; SOURCE LINE # 309
                                           ; SOURCE LINE # 310
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 311
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 312
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
001F 907802            MOV     DPTR,#07802H
0022 7401              MOV     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0025 907803            MOV     DPTR,#07803H
0028 74A3              MOV     A,#0A3H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
002B 7B02              MOV     R3,#02H
002D 7A78              MOV     R2,#078H
002F 7900              MOV     R1,#00H
0031 7D68              MOV     R5,#068H
0033 7C01              MOV     R4,#01H
0035 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 318
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 11  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AC02              MOV     R4,AR2
004C AD01              MOV     R5,AR1
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 319
0057 7B02              MOV     R3,#02H
0059 7A78              MOV     R2,#078H
005B 7906              MOV     R1,#06H
005D 7D08              MOV     R5,#08H
005F 7C78              MOV     R4,#078H
0061 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 320
0064 7B02              MOV     R3,#02H
0066 7A76              MOV     R2,#076H
0068 7904              MOV     R1,#04H
006A 7D10              MOV     R5,#010H
006C 7C00              MOV     R4,#00H
006E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 321
0071 7B02              MOV     R3,#02H
0073 7A76              MOV     R2,#076H
0075 7906              MOV     R1,#06H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 322
007E 907029            MOV     DPTR,#07029H
0081 7409              MOV     A,#09H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0084 907039            MOV     DPTR,#07039H
0087 740B              MOV     A,#0BH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
008A 907069            MOV     DPTR,#07069H
008D 7411              MOV     A,#011H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0090 907079            MOV     DPTR,#07079H
0093 7416              MOV     A,#016H
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
009C         ?C0004:
                                           ; SOURCE LINE # 332
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 20E0F7            JB      ACC.0,?C0004
00A5         ?C0005:
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 12  

00A5         ?C0006:
                                           ; SOURCE LINE # 333
00A5 907028            MOV     DPTR,#07028H
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 20E0F7            JB      ACC.0,?C0006
00AE         ?C0007:
00AE         ?C0008:
                                           ; SOURCE LINE # 334
00AE 907038            MOV     DPTR,#07038H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 20E0F7            JB      ACC.0,?C0008
00B7         ?C0009:
00B7         ?C0010:
                                           ; SOURCE LINE # 335
00B7 907068            MOV     DPTR,#07068H
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 20E0F7            JB      ACC.0,?C0010
00C0         ?C0011:
00C0         ?C0012:
                                           ; SOURCE LINE # 336
00C0 907078            MOV     DPTR,#07078H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 20E0F7            JB      ACC.0,?C0012
00C9         ?C0013:
                                           ; SOURCE LINE # 339
00C9         ?C0014:
00C9 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 359
0000 7E00        R     MOV     R6,#HIGH timeout
0002 7F00        R     MOV     R7,#LOW timeout
0004 900000      R     MOV     DPTR,#timeout_p
0007 EE                MOV     A,R6
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
000C 7B00              MOV     R3,#00H
000E 7A40              MOV     R2,#040H
0010 7980              MOV     R1,#080H
0012 7F01              MOV     R7,#01H
0014 7E00              MOV     R6,#00H
0016 7D18              MOV     R5,#018H
0018 7C00              MOV     R4,#00H
001A 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 365
001D 7B00              MOV     R3,#00H
001F 7A40              MOV     R2,#040H
0021 7984              MOV     R1,#084H
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 13  

0023 7F17              MOV     R7,#017H
0025 7E00              MOV     R6,#00H
0027 7D18              MOV     R5,#018H
0029 7C00              MOV     R4,#00H
002B 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 368
002E 904300            MOV     DPTR,#04300H
0031 7402              MOV     A,#02H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0034 904000            MOV     DPTR,#04000H
0037 7408              MOV     A,#08H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
003A 904200            MOV     DPTR,#04200H
003D 7403              MOV     A,#03H
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0040 7B0C              MOV     R3,#0CH
0042 7A01              MOV     R2,#01H
0044 7908              MOV     R1,#08H
0046 120000      E     LCALL   _cyread8
0049 9046A1            MOV     DPTR,#046A1H
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
004E 7B00              MOV     R3,#00H
0050 7A42              MOV     R2,#042H
0052 7922              MOV     R1,#022H
0054 7D08              MOV     R5,#08H
0056 7C00              MOV     R4,#00H
0058 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 377
005B 7B00              MOV     R3,#00H
005D 7A42              MOV     R2,#042H
005F 7920              MOV     R1,#020H
0061 7D51              MOV     R5,#051H
0063 7C10              MOV     R4,#010H
0065 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 379
0068 900000      R     MOV     DPTR,#pllLock
006B E4                CLR     A
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
006D 7F19              MOV     R7,#019H
006F 7E00              MOV     R6,#00H
0071 7D00              MOV     R5,#00H
0073 7C00              MOV     R4,#00H
0075 900000      R     MOV     DPTR,#timeout
0078 120000      E     LCALL   ?C?LSTXDATA
007B         ?C0015:
007B 900000      R     MOV     DPTR,#timeout_p
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 A3                INC     DPTR
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 8F82              MOV     DPL,R7
0085 8E83              MOV     DPH,R6
0087 120000      E     LCALL   ?C?LLDXDATA
008A EC                MOV     A,R4
008B 4D                ORL     A,R5
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 14  

008C 4E                ORL     A,R6
008D 4F                ORL     A,R7
008E 604E              JZ      ?C0016
0090 900000      R     MOV     DPTR,#pllLock
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 EF                MOV     A,R7
0096 6403              XRL     A,#03H
0098 6044              JZ      ?C0016
                                           ; SOURCE LINE # 381
009A 904225            MOV     DPTR,#04225H
009D E0                MOVX    A,@DPTR
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 5401              ANL     A,#01H
00A2 FF                MOV     R7,A
00A3 7E00              MOV     R6,#00H
00A5 900000      R     MOV     DPTR,#pllLock
00A8 E0                MOVX    A,@DPTR
00A9 FE                MOV     R6,A
00AA EE                MOV     A,R6
00AB 25E0              ADD     A,ACC
00AD FE                MOV     R6,A
00AE EE                MOV     A,R6
00AF 4F                ORL     A,R7
00B0 FF                MOV     R7,A
00B1 EF                MOV     A,R7
00B2 5403              ANL     A,#03H
00B4 FF                MOV     R7,A
00B5 900000      R     MOV     DPTR,#pllLock
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 382
00BA 7FE0              MOV     R7,#0E0H
00BC 7E01              MOV     R6,#01H
00BE 7D00              MOV     R5,#00H
00C0 7C00              MOV     R4,#00H
00C2 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 383
00C5 900000      R     MOV     DPTR,#timeout
00C8 120000      E     LCALL   ?C?LLDXDATA
00CB 7BFF              MOV     R3,#0FFH
00CD 7AFF              MOV     R2,#0FFH
00CF 79FF              MOV     R1,#0FFH
00D1 78FF              MOV     R0,#0FFH
00D3 120000      E     LCALL   ?C?LADD
00D6 900000      R     MOV     DPTR,#timeout
00D9 120000      E     LCALL   ?C?LSTXDATA
00DC 809D              SJMP    ?C0015
00DE         ?C0016:
                                           ; SOURCE LINE # 386
00DE 7B00              MOV     R3,#00H
00E0 7A40              MOV     R2,#040H
00E2 7904              MOV     R1,#04H
00E4 7D03              MOV     R5,#03H
00E6 7C01              MOV     R4,#01H
00E8 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 387
00EB 904004            MOV     DPTR,#04004H
00EE E4                CLR     A
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 15  

00F0 904004            MOV     DPTR,#04004H
00F3 7407              MOV     A,#07H
00F5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
00F6 904006            MOV     DPTR,#04006H
00F9 E4                CLR     A
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
00FB 904008            MOV     DPTR,#04008H
00FE 7448              MOV     A,#048H
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 391
0101 904004            MOV     DPTR,#04004H
0104 E4                CLR     A
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
0106 904001            MOV     DPTR,#04001H
0109 7402              MOV     A,#02H
010B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 394
010C 9043A2            MOV     DPTR,#043A2H
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
0111 EF                MOV     A,R7
0112 4403              ORL     A,#03H
0114 FF                MOV     R7,A
0115 EF                MOV     A,R7
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0117 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 415
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 418
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 419
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 16  

0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
                                           ; SOURCE LINE # 445
0000 904800            MOV     DPTR,#04800H
0003 74F1              MOV     A,#0F1H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
0006 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 450
0009 7B01              MOV     R3,#01H
000B 7A50              MOV     R2,#050H
000D 7903              MOV     R1,#03H
000F 120000      E     LCALL   _cyread8
0012 EF                MOV     A,R7
0013 4402              ORL     A,#02H
0015 FD                MOV     R5,A
0016 7B01              MOV     R3,#01H
0018 7A50              MOV     R2,#050H
001A 7903              MOV     R1,#03H
001C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 451
001F 7B01              MOV     R3,#01H
0021 7A50              MOV     R2,#050H
0023 7913              MOV     R1,#013H
0025 120000      E     LCALL   _cyread8
0028 EF                MOV     A,R7
0029 4402              ORL     A,#02H
002B FD                MOV     R5,A
002C 7B01              MOV     R3,#01H
002E 7A50              MOV     R2,#050H
0030 7913              MOV     R1,#013H
0032 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 454
0035 9043A0            MOV     DPTR,#043A0H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 4440              ORL     A,#040H
003D FF                MOV     R7,A
003E 9043A0            MOV     DPTR,#043A0H
0041 EF                MOV     A,R7
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 455
0043 9043C2            MOV     DPTR,#043C2H
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
0048 EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 17  

0049 4410              ORL     A,#010H
004B FF                MOV     R7,A
004C 9043C2            MOV     DPTR,#043C2H
004F EF                MOV     A,R7
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
                                           ; SOURCE LINE # 459
0051 7B08              MOV     R3,#08H
0053 7A0B              MOV     R2,#0BH
0055 7900              MOV     R1,#00H
0057 C003              PUSH    AR3
0059 C002              PUSH    AR2
005B C001              PUSH    AR1
005D 7B00              MOV     R3,#00H
005F 7A51              MOV     R2,#051H
0061 7902              MOV     R1,#02H
0063 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0066 120000      E     LCALL   ?C?PSTXDATA
0069 D001              POP     AR1
006B D002              POP     AR2
006D D003              POP     AR3
006F 7F08              MOV     R7,#08H
0071 7E00              MOV     R6,#00H
0073 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 460
0076 7B08              MOV     R3,#08H
0078 7A0B              MOV     R2,#0BH
007A 7908              MOV     R1,#08H
007C C003              PUSH    AR3
007E C002              PUSH    AR2
0080 C001              PUSH    AR1
0082 7B00              MOV     R3,#00H
0084 7A51              MOV     R2,#051H
0086 79C2              MOV     R1,#0C2H
0088 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
008B 120000      E     LCALL   ?C?PSTXDATA
008E D001              POP     AR1
0090 D002              POP     AR2
0092 D003              POP     AR3
0094 7F08              MOV     R7,#08H
0096 7E00              MOV     R6,#00H
0098 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 461
009B 7B08              MOV     R3,#08H
009D 7A0B              MOV     R2,#0BH
009F 7910              MOV     R1,#010H
00A1 C003              PUSH    AR3
00A3 C002              PUSH    AR2
00A5 C001              PUSH    AR1
00A7 7B00              MOV     R3,#00H
00A9 7A51              MOV     R2,#051H
00AB 79F2              MOV     R1,#0F2H
00AD 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00B0 120000      E     LCALL   ?C?PSTXDATA
00B3 D001              POP     AR1
00B5 D002              POP     AR2
00B7 D003              POP     AR3
00B9 7F08              MOV     R7,#08H
00BB 7E00              MOV     R6,#00H
00BD 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 462
00C0 7B08              MOV     R3,#08H
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 18  

00C2 7A0B              MOV     R2,#0BH
00C4 7918              MOV     R1,#018H
00C6 C003              PUSH    AR3
00C8 C002              PUSH    AR2
00CA C001              PUSH    AR1
00CC 7B00              MOV     R3,#00H
00CE 7A51              MOV     R2,#051H
00D0 7932              MOV     R1,#032H
00D2 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00D5 120000      E     LCALL   ?C?PSTXDATA
00D8 D001              POP     AR1
00DA D002              POP     AR2
00DC D003              POP     AR3
00DE 7F08              MOV     R7,#08H
00E0 7E00              MOV     R6,#00H
00E2 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 463
00E5 7B08              MOV     R3,#08H
00E7 7A0B              MOV     R2,#0BH
00E9 7920              MOV     R1,#020H
00EB C003              PUSH    AR3
00ED C002              PUSH    AR2
00EF C001              PUSH    AR1
00F1 7B00              MOV     R3,#00H
00F3 7A51              MOV     R2,#051H
00F5 7942              MOV     R1,#042H
00F7 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00FA 120000      E     LCALL   ?C?PSTXDATA
00FD D001              POP     AR1
00FF D002              POP     AR2
0101 D003              POP     AR3
0103 7F08              MOV     R7,#08H
0105 7E00              MOV     R6,#00H
0107 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 464
010A 7B08              MOV     R3,#08H
010C 7A0B              MOV     R2,#0BH
010E 7928              MOV     R1,#028H
0110 C003              PUSH    AR3
0112 C002              PUSH    AR2
0114 C001              PUSH    AR1
0116 7B00              MOV     R3,#00H
0118 7A51              MOV     R2,#051H
011A 7950              MOV     R1,#050H
011C 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
011F 120000      E     LCALL   ?C?PSTXDATA
0122 D001              POP     AR1
0124 D002              POP     AR2
0126 D003              POP     AR3
0128 7F0A              MOV     R7,#0AH
012A 7E00              MOV     R6,#00H
012C 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 465
012F 7B01              MOV     R3,#01H
0131 7A14              MOV     R2,#014H
0133 79DB              MOV     R1,#0DBH
0135 7D44              MOV     R5,#044H
0137 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 466
013A 9044F4            MOV     DPTR,#044F4H
013D 7401              MOV     A,#01H
013F F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 19  

                                           ; SOURCE LINE # 467
0140 904689            MOV     DPTR,#04689H
0143 743A              MOV     A,#03AH
0145 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
0146 904800            MOV     DPTR,#04800H
0149 7431              MOV     A,#031H
014B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
014C 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 475
014F 904800            MOV     DPTR,#04800H
0152 74B1              MOV     A,#0B1H
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 478
0155 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 481
0158 7B00              MOV     R3,#00H
015A 7A43              MOV     R2,#043H
015C 79A0              MOV     R1,#0A0H
015E C003              PUSH    AR3
0160 C002              PUSH    AR2
0162 C001              PUSH    AR1
0164 7B00              MOV     R3,#00H
0166 7A43              MOV     R2,#043H
0168 79B0              MOV     R1,#0B0H
016A 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
016D 120000      E     LCALL   ?C?PSTXDATA
0170 D001              POP     AR1
0172 D002              POP     AR2
0174 D003              POP     AR3
0176 7F0E              MOV     R7,#0EH
0178 7E00              MOV     R6,#00H
017A 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 482
017D 9043B0            MOV     DPTR,#043B0H
0180 E0                MOVX    A,@DPTR
0181 FF                MOV     R7,A
0182 EF                MOV     A,R7
0183 54FD              ANL     A,#0FDH
0185 FF                MOV     R7,A
0186 9043B0            MOV     DPTR,#043B0H
0189 EF                MOV     A,R7
018A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 483
018B 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    950    ----
   CONSTANT SIZE    =    397    ----
   XDATA SIZE       =      4       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
C51 COMPILER V9.03   CYFITTER_CFG                                                          02/17/2014 10:42:15 PAGE 20  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
