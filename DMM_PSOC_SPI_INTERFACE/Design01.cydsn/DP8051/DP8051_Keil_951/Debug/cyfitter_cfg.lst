C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: C:\Program Files\Cypress\PSoC Creator\3.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe .\Gene
                    -rated_Source\PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.lst) CD DB
                    - NOIP OT(2,SIZE) INCDIR(.,.\Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_951\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 3.0 Component Pack 7
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.  Except for the user defined sections in
   8          * CyClockStartupError(), this file should not be modified.
   9          *
  10          ********************************************************************************
  11          * Copyright 2013, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <string.h>
  18          #include <cytypes.h>
  19          #include <cydevice_trm.h>
  20          #include <cyfitter.h>
  21          #include <CyLib.h>
  22          #include <cyfitter_cfg.h>
  23          
  24          #define CY_NEED_CYCLOCKSTARTUPERROR 1
  25          
  26          
  27          #if defined(__C51__) || defined(__CX51__)
  28                  #define CYPACKED
  29                  #define CYPACKED_ATTR
  30                  #define CYALIGNED
  31                  #define DMAINITSEC
  32              #define CY_CFG_UNUSED
  33                  #define CY_CFG_MEMORY_BARRIER() do { } while (0)
  34          
  35          
  36          
  37                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  38                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  39                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  40          #else
                      #error Unsupported toolchain
              #endif
  43          
  44          
  45          
  46          /* Clock startup error codes                                                   */
  47          #define CYCLOCKSTART_NO_ERROR    0u
  48          #define CYCLOCKSTART_XTAL_ERROR  1u
  49          #define CYCLOCKSTART_32KHZ_ERROR 2u
  50          #define CYCLOCKSTART_PLL_ERROR   3u
  51          
  52          #ifdef CY_NEED_CYCLOCKSTARTUPERROR
  53          /*******************************************************************************
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 2   

  54          * Function Name: CyClockStartupError
  55          ********************************************************************************
  56          * Summary:
  57          *  If an error is encountered during clock configuration (crystal startup error,
  58          *  PLL lock error, etc.), the system will end up here.  Unless reimplemented by
  59          *  the customer, this function will stop in an infinite loop.
  60          *
  61          * Parameters:
  62          *   void
  63          *
  64          * Return:
  65          *   void
  66          *
  67          *******************************************************************************/
  68          CY_CFG_UNUSED
  69          static void CyClockStartupError(uint8 errorCode);
  70          CY_CFG_UNUSED
  71          static void CyClockStartupError(uint8 errorCode)
  72          {
  73   1          /* To remove the compiler warning if errorCode not used.                */
  74   1          errorCode = errorCode;
  75   1      
  76   1          /* `#START CyClockStartupError` */
  77   1      
  78   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  79   1          /* we will end up here to allow the customer to implement something to  */
  80   1          /* deal with the clock condition.                                       */
  81   1      
  82   1          /* `#END` */
  83   1      
  84   1          /* If nothing else, stop here since the clocks have not started         */
  85   1          /* correctly.                                                           */
  86   1          while(1) {}
  87   1      }
  88          #endif
  89          
  90          /* IOPORT_3 Address: CYDEV_PRTDSI_PRT3_BASE Size (bytes): 7 */
  91          #define BS_IOPORT_3_VAL ((const uint8 CYFAR *)0x00080000u)
  92          
  93          /* IOPORT_5 Address: CYDEV_PRTDSI_PRT5_BASE Size (bytes): 7 */
  94          #define BS_IOPORT_5_VAL ((const uint8 CYFAR *)0x00080008u)
  95          
  96          /* IOPORT_7 Address: CYDEV_PRTDSI_PRT12_BASE Size (bytes): 6 */
  97          #define BS_IOPORT_7_VAL ((const uint8 CYFAR *)0x00080010u)
  98          
  99          /* IOPORT_8 Address: CYDEV_PRTDSI_PRT15_BASE Size (bytes): 7 */
 100          #define BS_IOPORT_8_VAL ((const uint8 CYFAR *)0x00080018u)
 101          
 102          /* IDMUX_IRQ Address: CYREG_IDMUX_IRQ_CTL0 Size (bytes): 8 */
 103          #define BS_IDMUX_IRQ_VAL ((const uint8 CYFAR *)0x00080020u)
 104          
 105          /* DSISWITCH_0_0 Address: CYDEV_UCFG_DSI13_BASE Size (bytes): 128 */
 106          #define BS_DSISWITCH_0_0_VAL ((const uint8 CYFAR *)0x00080028u)
 107          
 108          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080u Size (bytes): 128 */
 109          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000800A8u)
 110          
 111          /* DSISWITCH_0_1 Address: CYDEV_UCFG_DSI12_BASE Size (bytes): 128 */
 112          #define BS_DSISWITCH_0_1_VAL ((const uint8 CYFAR *)0x00080128u)
 113          
 114          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080u Size (bytes): 128 */
 115          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000801A8u)
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 3   

 116          
 117          /* UDB_1_0_HV_ROUTING Address: CYDEV_UCFG_B1_P5_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 118          #define BS_UDB_1_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080228u)
 119          
 120          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 121          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000802A8u)
 122          
 123          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 124          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080328u)
 125          
 126          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080u Size (bytes): 128 */
 127          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000803A8u)
 128          
 129          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 130          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x00080428u)
 131          
 132          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080u Size (bytes): 128 */
 133          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000804A8u)
 134          
 135          /* DSI3_1_HV_ROUTING Address: CYDEV_UCFG_DSI8_BASE + 0x00000080u Size (bytes): 128 */
 136          #define BS_DSI3_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080528u)
 137          
 138          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080u Size (bytes): 128 */
 139          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000805A8u)
 140          
 141          /* DSISWITCH_1_3 Address: CYDEV_UCFG_DSI2_BASE Size (bytes): 128 */
 142          #define BS_DSISWITCH_1_3_VAL ((const uint8 CYFAR *)0x00080628u)
 143          
 144          /* DSI3_3_HV_ROUTING Address: CYDEV_UCFG_DSI2_BASE + 0x00000080u Size (bytes): 128 */
 145          #define BS_DSI3_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000806A8u)
 146          
 147          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 148          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080728u)
 149          
 150          /* IOPINS0_7 Address: CYREG_PRT12_DM0 Size (bytes): 8 */
 151          #define BS_IOPINS0_7_VAL ((const uint8 CYFAR *)0x00080730u)
 152          
 153          /* IOPINS0_8 Address: CYREG_PRT15_DM0 Size (bytes): 8 */
 154          #define BS_IOPINS0_8_VAL ((const uint8 CYFAR *)0x00080738u)
 155          
 156          /* IOPINS0_3 Address: CYREG_PRT3_DM0 Size (bytes): 8 */
 157          #define BS_IOPINS0_3_VAL ((const uint8 CYFAR *)0x00080740u)
 158          
 159          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
 160          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x00080748u)
 161          
 162          /* IOPINS0_5 Address: CYREG_PRT5_DM0 Size (bytes): 8 */
 163          #define BS_IOPINS0_5_VAL ((const uint8 CYFAR *)0x00080750u)
 164          
 165          
 166          /*******************************************************************************
 167          * Function Name: cfg_dma_init
 168          ********************************************************************************
 169          * Summary:
 170          *  This function is used to copy device configuration data from constant values
 171          *  stored in memory into the proper chip configuration registers using DMA.  It
 172          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 173          *
 174          * Parameters:  
 175          *   void
 176          *
 177          * Return:
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 4   

 178          *   void
 179          *
 180          *******************************************************************************/
 181          static void cfg_dma_init(void);
 182          static void cfg_dma_init(void)
 183          {
 184   1              /* TD structure for big-endian systems. Requires 2-byte endian swap */
 185   1              CYPACKED struct td_t {
 186   1                      uint16 size;
 187   1                      uint8 flags;
 188   1                      uint8 next_td_ptr;
 189   1                      uint16 src;
 190   1                      uint16 dest;
 191   1              } CYPACKED_ATTR;
 192   1      
 193   1              /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 194   1              DMAINITSEC static const uint8 CYCODE CH1_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u
             -, 0x00u };
 195   1      
 196   1              /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 197   1              DMAINITSEC static const uint8 CYCODE CH2_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x00u, 0x00u, 0x01u
             -, 0x00u };
 198   1      
 199   1              /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 200   1              DMAINITSEC static const uint8 CYCODE CH5_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x00u
             -, 0x00u };
 201   1      
 202   1              /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 203   1              DMAINITSEC static const uint8 CYCODE CH6_ADDR_DATA0[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x08u, 0x00u, 0x01u
             -, 0x00u };
 204   1      
 205   1              /* Initialization data for each DMA channel's TD registers */
 206   1              DMAINITSEC static const uint8 CYCODE DMA_TD_START_CMD[] = { 0x01u, 0x00u, 0x00u, 0x00u, 0x01u };
 207   1      
 208   1              CYALIGNED static uint32 CYXDATA DMA_ZERO_VAL;
 209   1      
 210   1              /* This table holds all of the initialization data necessary for the DMA
 211   1                 process to transfer data from the source location to the destination. */
 212   1              DMAINITSEC static const struct td_t CYCODE CFG_TD_LIST0[] = {
 213   1                      /* Size, Flags, Next, Source, Destination */
 214   1                      { 8u, 0x23u, 0x02u, (uint16)(uint32)(CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },      /* TD 1 */
 215   1                      { 8u, 0x23u, 0x03u, (uint16)(uint32)(CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },      /* TD 2 */
 216   1                      { 8u, 0x23u, 0x04u, (uint16)(uint32)(CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },      /* TD 3 */
 217   1                      { 8u, 0x23u, 0x05u, (uint16)(uint32)(CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },      /* TD 4 */
 218   1                      { 5u, 0x23u, 0x06u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },   /* TD 5 */
 219   1                      { 5u, 0x23u, 0x07u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },   /* TD 6 */
 220   1                      { 5u, 0x23u, 0x08u, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },   /* TD 7 */
 221   1                      { 5u, 0x23u, 0xFEu, (uint16)(uint32)(DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },   /* TD 8 */
 222   1                      { 21u, 0x22u, 0x0Au, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_I2C_XCFG) },       /* TD 9 */
 223   1                      { 32u, 0x22u, 0x0Bu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT1_DR) },        /* TD 10 */
 224   1                      { 16u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT6_DR) },        /* TD 11 */
 225   1                      { 4095u, 0x22u, 0x0Du, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },   /* TD 12 *
             -/
 226   1                      { 1u, 0x22u, 0x0Eu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P7_ROUTE_BASE + 0x00000080u)
             - },        /* TD 13 */
 227   1                      { 384u, 0x22u, 0x0Fu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },    /* TD 14 */
 228   1                      { 384u, 0x22u, 0x10u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },    /* TD 15 */
 229   1                      { 384u, 0x22u, 0x11u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },    /* TD 16 */
 230   1                      { 384u, 0x22u, 0x12u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },    /* TD 17 */
 231   1                      { 512u, 0x22u, 0x13u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },        /* TD 18 */
 232   1                      { 128u, 0x22u, 0x14u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE) },        /* TD 19 */
 233   1                      { 1152u, 0x22u, 0x15u, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },       /* TD 20 */
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 5   

 234   1                      { 32u, 0x22u, 0xFEu, (uint16)(uint32)(&DMA_ZERO_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) }, /* TD 21 */
 235   1                      { 7u, 0x23u, 0x17u, (uint16)(uint32)(BS_IOPORT_3_VAL), (uint16)(CYDEV_PRTDSI_PRT3_BASE) },      /* TD 22 */
 236   1                      { 7u, 0x23u, 0x18u, (uint16)(uint32)(BS_IOPORT_5_VAL), (uint16)(CYDEV_PRTDSI_PRT5_BASE) },      /* TD 23 */
 237   1                      { 6u, 0x23u, 0x19u, (uint16)(uint32)(BS_IOPORT_7_VAL), (uint16)(CYDEV_PRTDSI_PRT12_BASE) },     /* TD 24 */
 238   1                      { 7u, 0x23u, 0xFEu, (uint16)(uint32)(BS_IOPORT_8_VAL), (uint16)(CYDEV_PRTDSI_PRT15_BASE) },     /* TD 25 */
 239   1                      { 8u, 0x23u, 0x1Bu, (uint16)(uint32)(BS_IDMUX_IRQ_VAL), (uint16)(CYREG_IDMUX_IRQ_CTL0) },       /* TD 26 */
 240   1                      { 128u, 0x23u, 0x1Cu, (uint16)(uint32)(BS_DSISWITCH_0_0_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },        /* TD 2
             -7 */
 241   1                      { 128u, 0x23u, 0x1Du, (uint16)(uint32)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x000
             -00080u) },        /* TD 28 */
 242   1                      { 128u, 0x23u, 0x1Eu, (uint16)(uint32)(BS_DSISWITCH_0_1_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },        /* TD 2
             -9 */
 243   1                      { 128u, 0x23u, 0x1Fu, (uint16)(uint32)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x000
             -00080u) },        /* TD 30 */
 244   1                      { 128u, 0x23u, 0x20u, (uint16)(uint32)(BS_UDB_1_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P5_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 31 */
 245   1                      { 128u, 0x23u, 0x21u, (uint16)(uint32)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 32 */
 246   1                      { 128u, 0x23u, 0x22u, (uint16)(uint32)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 33 */
 247   1                      { 128u, 0x23u, 0x23u, (uint16)(uint32)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE 
             -+ 0x00000080u) },     /* TD 34 */
 248   1                      { 128u, 0x23u, 0x24u, (uint16)(uint32)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) }, /* TD 35
             - */
 249   1                      { 128u, 0x23u, 0x25u, (uint16)(uint32)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x0000
             -0080u) },        /* TD 36 */
 250   1                      { 128u, 0x23u, 0x26u, (uint16)(uint32)(BS_DSI3_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE + 0x0000
             -0080u) },        /* TD 37 */
 251   1                      { 128u, 0x23u, 0x27u, (uint16)(uint32)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x0000
             -0080u) },        /* TD 38 */
 252   1                      { 128u, 0x23u, 0x28u, (uint16)(uint32)(BS_DSISWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) }, /* TD 39
             - */
 253   1                      { 128u, 0x23u, 0xFEu, (uint16)(uint32)(BS_DSI3_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE + 0x0000
             -0080u) },        /* TD 40 */
 254   1              };
 255   1      
 256   1              DMA_ZERO_VAL = 0u;
 257   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG0, 0x10u);    /* set burstcnt */
 258   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_CFG, 0x01u);   /* enable ch0 */
 259   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_STATUS+1u), 0x00u);   /* set first TD to 0 */
 260   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD0, 40u*8u);       /* transfer size */
 261   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+2u), 0x01u);    /* set next TD to 1 */
 262   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD0+3u), 0xA3u);    /* set TD flags */
 263   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_TDMEM0_ORIG_TD1, (uint16)((uint32)CFG_TD_LIST0 & 0x0000FFFFu)); /
             -* set td0's src addr */
 264   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_TDMEM0_ORIG_TD1+2u), CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst a
             -ddr */
 265   1              CY_SET_REG16((void CYXDATA *)CYREG_PHUB_CFGMEM0_CFG1, (uint16)(CYDEV_FLS_BASE >> 16));  /* set ch0's src h
             -igh addr */
 266   1              CY_SET_REG16((void CYXDATA *)(CYREG_PHUB_CFGMEM0_CFG1+2u), (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));     /* se
             -t ch0's dst high addr */
 267   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_STATUS+1u), 0x09u);   /* ch1 first TD: 9 */
 268   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH2_BASIC_STATUS+1u), 0x0Cu);   /* ch2 first TD: 12 */
 269   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH5_BASIC_STATUS+1u), 0x16u);   /* ch5 first TD: 22 */
 270   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH6_BASIC_STATUS+1u), 0x1Au);   /* ch6 first TD: 26 */
 271   1      
 272   1              CY_CFG_MEMORY_BARRIER();
 273   1              CY_SET_REG8((void CYXDATA *)CYREG_PHUB_CH0_ACTION, 0x01u); /* cpu_req */
 274   1              CY_CFG_MEMORY_BARRIER();
 275   1      
 276   1              /* Wait for all DMA transfers to complete */
 277   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 6   

 278   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 279   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 280   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 281   1              while(0u != (CY_GET_REG8((void CYXDATA *)CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 282   1      
 283   1      
 284   1      }
 285          /*******************************************************************************
 286          * Function Name: ClockSetup
 287          ********************************************************************************
 288          *
 289          * Summary:
 290          *  Performs the initialization of all of the clocks in the device based on the
 291          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 292          *  clocks and setting the necessary dividers to produce the desired frequency. 
 293          *
 294          * Parameters:
 295          *  void
 296          *
 297          * Return:
 298          *  void
 299          *
 300          *******************************************************************************/
 301          static void ClockSetup(void);
 302          static void ClockSetup(void)
 303          {
 304   1              uint32 timeout;
 305   1              uint8 pllLock;
 306   1      
 307   1      
 308   1              /* Configure ILO based on settings from Clock DWR */
 309   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02u);
 310   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08u);
 311   1      
 312   1              /* Configure IMO based on settings from Clock DWR */
 313   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03u);
 314   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8((void CYFAR *)CYREG_FLSHID_CUST_TABLES_IMO
             -_3MHZ)));
 315   1      
 316   1              /* Configure PLL based on settings from Clock DWR */
 317   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008u);
 318   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1251u);
 319   1              /* Wait up to 250us for the PLL to lock */
 320   1              pllLock = 0u;
 321   1              for (timeout = 250u / 10u; (timeout > 0u) && (pllLock != 0x03u); timeout--)
 322   1              { 
 323   2                      pllLock = 0x03u & ((uint8)((uint8)pllLock << 1) | ((CY_GET_REG8((void CYXDATA *)CYREG_FASTCLK_PLL_SR) & 
             -0x01u) >> 0));
 324   2                      CyDelayCycles(10u * 48u); /* Delay 10us based on 48MHz clock */
 325   2              }
 326   1              /* If we ran out of time the PLL didn't lock so go to the error function */
 327   1              if (timeout == 0u)
 328   1              {
 329   2                      CyClockStartupError(CYCLOCKSTART_PLL_ERROR);
 330   2              }
 331   1      
 332   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 333   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0100u);
 334   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07u);
 335   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00u);
 336   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48u);
 337   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00u);
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 7   

 338   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02u);
 339   1      }
 340          
 341          
 342          /* Analog API Functions */
 343          
 344          
 345          /*******************************************************************************
 346          * Function Name: AnalogSetDefault
 347          ********************************************************************************
 348          *
 349          * Summary:
 350          *  Sets up the analog portions of the chip to default values based on chip
 351          *  configuration options from the project.
 352          *
 353          * Parameters:
 354          *  void
 355          *
 356          * Return:
 357          *  void
 358          *
 359          *******************************************************************************/
 360          static void AnalogSetDefault(void);
 361          static void AnalogSetDefault(void)
 362          {
 363   1              uint8 bg_xover_inl_trim = CY_GET_XTND_REG8((void CYFAR *)(CYREG_FLSHID_MFG_CFG_BG_XOVER_INL_TRIM + 1u));
 364   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT0), (bg_xover_inl_trim & 0x07u));
 365   1              CY_SET_REG8((void CYXDATA *)(CYREG_BG_DFT1), ((bg_xover_inl_trim >> 4) & 0x0Fu));
 366   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, 0x44u);
 367   1      }
 368          
 369          
 370          /*******************************************************************************
 371          * Function Name: SetAnalogRoutingPumps
 372          ********************************************************************************
 373          *
 374          * Summary:
 375          * Enables or disables the analog pumps feeding analog routing switches.
 376          * Intended to be called at startup, based on the Vdda system configuration;
 377          * may be called during operation when the user informs us that the Vdda voltage
 378          * crossed the pump threshold.
 379          *
 380          * Parameters:
 381          *  enabled - 1 to enable the pumps, 0 to disable the pumps
 382          *
 383          * Return:
 384          *  void
 385          *
 386          *******************************************************************************/
 387          void SetAnalogRoutingPumps(uint8 enabled)
 388          {
 389   1              uint8 regValue = CY_GET_REG8((void CYXDATA *)CYREG_PUMP_CR0);
 390   1              if (enabled != 0u)
 391   1              {
 392   2                      regValue |= 0x00u;
 393   2              }
 394   1              else
 395   1              {
 396   2                      regValue &= (uint8)~0x00u;
 397   2              }
 398   1              CY_SET_REG8((void CYXDATA *)CYREG_PUMP_CR0, regValue);
 399   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 8   

 400          
 401          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 402          
 403          
 404          /*******************************************************************************
 405          * Function Name: cyfitter_cfg
 406          ********************************************************************************
 407          * Summary:
 408          *  This function is called by the start-up code for the selected device. It
 409          *  performs all of the necessary device configuration based on the design
 410          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 411          *  as Clocks and Pins as well as any component configuration that is necessary.
 412          *
 413          * Parameters:  
 414          *   void
 415          *
 416          * Return:
 417          *   void
 418          *
 419          *******************************************************************************/
 420          
 421          void cyfitter_cfg(void)
 422          {
 423   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 424   1              CY_SET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG, (CY_GET_XTND_REG8((void CYFAR *)CYREG_MLOGIC_DEBUG) | 
             -0x05u));
 425   1      
 426   1              {
 427   2                      cfg_dma_init();
 428   2      
 429   2                      /* Enable digital routing */
 430   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL0_BANK_CTL
             -) | 0x02u);
 431   2                      CY_SET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8((void CYFAR *)CYREG_BCTL1_BANK_CTL
             -) | 0x02u);
 432   2      
 433   2                      /* Enable UDB array */
 434   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_ACT_CFG0) | 0x40u);
 435   2                      CY_SET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2, CY_GET_REG8((void CYXDATA *)CYREG_PM_AVAIL_CR2) | 0x10u)
             -;
 436   2              }
 437   1      
 438   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 439   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (const void CYFAR *)(BS_IOPINS0_0_VAL), 8u);
 440   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT12_DM0), (const void CYFAR *)(BS_IOPINS0_7_VAL), 8u);
 441   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT15_DM0), (const void CYFAR *)(BS_IOPINS0_8_VAL), 8u);
 442   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT3_DM0), (const void CYFAR *)(BS_IOPINS0_3_VAL), 8u);
 443   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (const void CYFAR *)(BS_IOPINS0_4_VAL), 8u);
 444   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT5_DM0), (const void CYFAR *)(BS_IOPINS0_5_VAL), 8u);
 445   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CSR_EN), 0x01u);
 446   1      
 447   1              /* Switch Boost to the precision bandgap reference from its internal reference */
 448   1              CY_SET_REG8((void CYXDATA *)CYREG_BOOST_CR2, (CY_GET_REG8((void CYXDATA *)CYREG_BOOST_CR2) | 0x08u));
 449   1              if (CYDEV_CHIP_REV_ACTUAL < 5u)
 450   1              {
 451   2                      CY_SET_REG8((void CYXDATA *)CYREG_PWRSYS_WAKE_TR2, 0x3Au);
 452   2              }
 453   1      
 454   1      
 455   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 456   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xF1u : 0xC0u));
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 9   

 457   1              /* Setup clocks based on selections from Clock DWR */
 458   1              ClockSetup();
 459   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 460   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), (((CYDEV_INSTRUCT_CACHE_ENABLED) != 0) ? 0xB1u : 0x80u));
 461   1      
 462   1              /* Perform basic analog initialization to defaults */
 463   1              AnalogSetDefault();
 464   1      
 465   1              /* Configure alternate active mode */
 466   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (const void CYFAR *)CYDEV_PM_ACT_BASE, 14u);
 467   1              CY_SET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0, CY_GET_REG8((void CYXDATA *)CYREG_PM_STBY_CFG0) & (uint8)
             -~0x02u);        /* Disable CPU */
 468   1      }
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 71
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 86
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 182
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 256
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 257
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 259
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 260
001F 7B02              MOV     R3,#02H
0021 7A78              MOV     R2,#078H
0023 7900              MOV     R1,#00H
0025 7D40              MOV     R5,#040H
0027 7C01              MOV     R4,#01H
0029 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 261
002C 907802            MOV     DPTR,#07802H
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 262
0032 907803            MOV     DPTR,#07803H
0035 74A3              MOV     A,#0A3H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 11  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AF01              MOV     R7,AR1
004C AE02              MOV     R6,AR2
004E AD03              MOV     R5,AR3
0050 7C00              MOV     R4,#00H
0052 EF                MOV     A,R7
0053 54FF              ANL     A,#0FFH
0055 FF                MOV     R7,A
0056 EE                MOV     A,R6
0057 54FF              ANL     A,#0FFH
0059 FE                MOV     R6,A
005A ED                MOV     A,R5
005B 5400              ANL     A,#00H
005D FD                MOV     R5,A
005E EC                MOV     A,R4
005F 5400              ANL     A,#00H
0061 FC                MOV     R4,A
0062 AD07              MOV     R5,AR7
0064 AC06              MOV     R4,AR6
0066 D001              POP     AR1
0068 D002              POP     AR2
006A D003              POP     AR3
006C 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 264
006F 7B02              MOV     R3,#02H
0071 7A78              MOV     R2,#078H
0073 7906              MOV     R1,#06H
0075 7D08              MOV     R5,#08H
0077 7C78              MOV     R4,#078H
0079 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 265
007C 7B02              MOV     R3,#02H
007E 7A76              MOV     R2,#076H
0080 7904              MOV     R1,#04H
0082 7D10              MOV     R5,#010H
0084 7C00              MOV     R4,#00H
0086 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 266
0089 7B02              MOV     R3,#02H
008B 7A76              MOV     R2,#076H
008D 7906              MOV     R1,#06H
008F 7D00              MOV     R5,#00H
0091 7C00              MOV     R4,#00H
0093 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 267
0096 907029            MOV     DPTR,#07029H
0099 7409              MOV     A,#09H
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
009C 907039            MOV     DPTR,#07039H
009F 740C              MOV     A,#0CH
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 269
00A2 907069            MOV     DPTR,#07069H
00A5 7416              MOV     A,#016H
00A7 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 12  

                                           ; SOURCE LINE # 270
00A8 907079            MOV     DPTR,#07079H
00AB 741A              MOV     A,#01AH
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
                                           ; SOURCE LINE # 273
00AE 907014            MOV     DPTR,#07014H
00B1 7401              MOV     A,#01H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 274
00B4         ?C0010:
                                           ; SOURCE LINE # 277
00B4 907018            MOV     DPTR,#07018H
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 EF                MOV     A,R7
00BA 5401              ANL     A,#01H
00BC FF                MOV     R7,A
00BD 7E00              MOV     R6,#00H
00BF EF                MOV     A,R7
00C0 4E                ORL     A,R6
00C1 70F1              JNZ     ?C0010
00C3         ?C0011:
00C3         ?C0012:
                                           ; SOURCE LINE # 278
00C3 907028            MOV     DPTR,#07028H
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 EF                MOV     A,R7
00C9 5401              ANL     A,#01H
00CB FF                MOV     R7,A
00CC 7E00              MOV     R6,#00H
00CE EF                MOV     A,R7
00CF 4E                ORL     A,R6
00D0 70F1              JNZ     ?C0012
00D2         ?C0013:
00D2         ?C0014:
                                           ; SOURCE LINE # 279
00D2 907038            MOV     DPTR,#07038H
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 5401              ANL     A,#01H
00DA FF                MOV     R7,A
00DB 7E00              MOV     R6,#00H
00DD EF                MOV     A,R7
00DE 4E                ORL     A,R6
00DF 70F1              JNZ     ?C0014
00E1         ?C0015:
00E1         ?C0016:
                                           ; SOURCE LINE # 280
00E1 907068            MOV     DPTR,#07068H
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 5401              ANL     A,#01H
00E9 FF                MOV     R7,A
00EA 7E00              MOV     R6,#00H
00EC EF                MOV     A,R7
00ED 4E                ORL     A,R6
00EE 70F1              JNZ     ?C0016
00F0         ?C0017:
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 13  

00F0         ?C0018:
                                           ; SOURCE LINE # 281
00F0 907078            MOV     DPTR,#07078H
00F3 E0                MOVX    A,@DPTR
00F4 FF                MOV     R7,A
00F5 EF                MOV     A,R7
00F6 5401              ANL     A,#01H
00F8 FF                MOV     R7,A
00F9 7E00              MOV     R6,#00H
00FB EF                MOV     A,R7
00FC 4E                ORL     A,R6
00FD 70F1              JNZ     ?C0018
00FF         ?C0019:
                                           ; SOURCE LINE # 284
00FF         ?C0020:
00FF 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
                                           ; SOURCE LINE # 309
0000 904300            MOV     DPTR,#04300H
0003 7402              MOV     A,#02H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 310
0006 904000            MOV     DPTR,#04000H
0009 7408              MOV     A,#08H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 313
000C 904200            MOV     DPTR,#04200H
000F 7403              MOV     A,#03H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 314
0012 7B0C              MOV     R3,#0CH
0014 7A01              MOV     R2,#01H
0016 7908              MOV     R1,#08H
0018 120000      E     LCALL   _cyread8
001B 9046A1            MOV     DPTR,#046A1H
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 317
0020 7B00              MOV     R3,#00H
0022 7A42              MOV     R2,#042H
0024 7922              MOV     R1,#022H
0026 7D08              MOV     R5,#08H
0028 7C00              MOV     R4,#00H
002A 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 318
002D 7B00              MOV     R3,#00H
002F 7A42              MOV     R2,#042H
0031 7920              MOV     R1,#020H
0033 7D51              MOV     R5,#051H
0035 7C12              MOV     R4,#012H
0037 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 320
003A 900000      R     MOV     DPTR,#pllLock
003D E4                CLR     A
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
003F 7F19              MOV     R7,#019H
0041 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 14  

0043 7D00              MOV     R5,#00H
0045 7C00              MOV     R4,#00H
0047 900000      R     MOV     DPTR,#timeout
004A 120000      E     LCALL   ?C?LSTXDATA
004D         ?C0021:
004D 900000      R     MOV     DPTR,#timeout
0050 120000      E     LCALL   ?C?LLDXDATA
0053 D3                SETB    C
0054 EF                MOV     A,R7
0055 9400              SUBB    A,#00H
0057 EE                MOV     A,R6
0058 9400              SUBB    A,#00H
005A 404E              JC      ?C0022
005C 900000      R     MOV     DPTR,#pllLock
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 6403              XRL     A,#03H
0064 6044              JZ      ?C0022
                                           ; SOURCE LINE # 322
                                           ; SOURCE LINE # 323
0066 904225            MOV     DPTR,#04225H
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 5401              ANL     A,#01H
006E FF                MOV     R7,A
006F 7E00              MOV     R6,#00H
0071 900000      R     MOV     DPTR,#pllLock
0074 E0                MOVX    A,@DPTR
0075 FE                MOV     R6,A
0076 EE                MOV     A,R6
0077 25E0              ADD     A,ACC
0079 FE                MOV     R6,A
007A EE                MOV     A,R6
007B 4F                ORL     A,R7
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 5403              ANL     A,#03H
0080 FF                MOV     R7,A
0081 900000      R     MOV     DPTR,#pllLock
0084 EF                MOV     A,R7
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 324
0086 7FE0              MOV     R7,#0E0H
0088 7E01              MOV     R6,#01H
008A 7D00              MOV     R5,#00H
008C 7C00              MOV     R4,#00H
008E 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 325
0091 900000      R     MOV     DPTR,#timeout
0094 120000      E     LCALL   ?C?LLDXDATA
0097 7BFF              MOV     R3,#0FFH
0099 7AFF              MOV     R2,#0FFH
009B 79FF              MOV     R1,#0FFH
009D 78FF              MOV     R0,#0FFH
009F 120000      E     LCALL   ?C?LADD
00A2 900000      R     MOV     DPTR,#timeout
00A5 120000      E     LCALL   ?C?LSTXDATA
00A8 80A3              SJMP    ?C0021
00AA         ?C0022:
                                           ; SOURCE LINE # 327
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 15  

00AA 900000      R     MOV     DPTR,#timeout
00AD 120000      E     LCALL   ?C?LLDXDATA
00B0 EF                MOV     A,R7
00B1 4E                ORL     A,R6
00B2 7005              JNZ     ?C0024
                                           ; SOURCE LINE # 328
                                           ; SOURCE LINE # 329
00B4 7F03              MOV     R7,#03H
00B6 120000      R     LCALL   _CyClockStartupError
                                           ; SOURCE LINE # 330
00B9         ?C0024:
                                           ; SOURCE LINE # 333
00B9 7B00              MOV     R3,#00H
00BB 7A40              MOV     R2,#040H
00BD 7904              MOV     R1,#04H
00BF 7D00              MOV     R5,#00H
00C1 7C01              MOV     R4,#01H
00C3 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 334
00C6 904004            MOV     DPTR,#04004H
00C9 7407              MOV     A,#07H
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 335
00CC 904006            MOV     DPTR,#04006H
00CF E4                CLR     A
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 336
00D1 904008            MOV     DPTR,#04008H
00D4 7448              MOV     A,#048H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 337
00D7 904004            MOV     DPTR,#04004H
00DA E4                CLR     A
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 338
00DC 904001            MOV     DPTR,#04001H
00DF 7402              MOV     A,#02H
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 339
00E2 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
                                           ; SOURCE LINE # 363
0000 7B0C              MOV     R3,#0CH
0002 7A01              MOV     R2,#01H
0004 79CF              MOV     R1,#0CFH
0006 120000      E     LCALL   _cyread8
0009 900000      R     MOV     DPTR,#bg_xover_inl_trim
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 364
000E 900000      R     MOV     DPTR,#bg_xover_inl_trim
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 5407              ANL     A,#07H
0016 FF                MOV     R7,A
0017 90586E            MOV     DPTR,#0586EH
001A EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 16  

001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
001C 900000      R     MOV     DPTR,#bg_xover_inl_trim
001F E0                MOVX    A,@DPTR
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 C4                SWAP    A
0023 540F              ANL     A,#0FH
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 540F              ANL     A,#0FH
0029 FF                MOV     R7,A
002A 90586F            MOV     DPTR,#0586FH
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
002F 905876            MOV     DPTR,#05876H
0032 7444              MOV     A,#044H
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
0035 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _SetAnalogRoutingPumps (BEGIN)
                                           ; SOURCE LINE # 387
0000 900000      R     MOV     DPTR,#enabled
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 388
                                           ; SOURCE LINE # 389
0005 905876            MOV     DPTR,#05876H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#regValue
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 390
000F 900000      R     MOV     DPTR,#enabled
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 6010              JZ      ?C0027
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
0017 900000      R     MOV     DPTR,#regValue
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 4400              ORL     A,#00H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#regValue
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
0025 800E              SJMP    ?C0028
0027         ?C0027:
                                           ; SOURCE LINE # 395
                                           ; SOURCE LINE # 396
0027 900000      R     MOV     DPTR,#regValue
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 17  

002D 54FF              ANL     A,#0FFH
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#regValue
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0035         ?C0028:
                                           ; SOURCE LINE # 398
0035 900000      R     MOV     DPTR,#regValue
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A 905876            MOV     DPTR,#05876H
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
003F 22                RET     
             ; FUNCTION _SetAnalogRoutingPumps (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
                                           ; SOURCE LINE # 424
0000 7B00              MOV     R3,#00H
0002 7A46              MOV     R2,#046H
0004 79E8              MOV     R1,#0E8H
0006 120000      E     LCALL   _cyread8
0009 EF                MOV     A,R7
000A 4405              ORL     A,#05H
000C FD                MOV     R5,A
000D 7B00              MOV     R3,#00H
000F 7A46              MOV     R2,#046H
0011 79E8              MOV     R1,#0E8H
0013 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 426
                                           ; SOURCE LINE # 427
0016 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 430
0019 7B01              MOV     R3,#01H
001B 7A50              MOV     R2,#050H
001D 7903              MOV     R1,#03H
001F 120000      E     LCALL   _cyread8
0022 EF                MOV     A,R7
0023 4402              ORL     A,#02H
0025 FD                MOV     R5,A
0026 7B01              MOV     R3,#01H
0028 7A50              MOV     R2,#050H
002A 7903              MOV     R1,#03H
002C 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 431
002F 7B01              MOV     R3,#01H
0031 7A50              MOV     R2,#050H
0033 7913              MOV     R1,#013H
0035 120000      E     LCALL   _cyread8
0038 EF                MOV     A,R7
0039 4402              ORL     A,#02H
003B FD                MOV     R5,A
003C 7B01              MOV     R3,#01H
003E 7A50              MOV     R2,#050H
0040 7913              MOV     R1,#013H
0042 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 434
0045 9043A0            MOV     DPTR,#043A0H
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 18  

0048 E0                MOVX    A,@DPTR
0049 FF                MOV     R7,A
004A EF                MOV     A,R7
004B 4440              ORL     A,#040H
004D FF                MOV     R7,A
004E 9043A0            MOV     DPTR,#043A0H
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
0053 9043C2            MOV     DPTR,#043C2H
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 EF                MOV     A,R7
0059 4410              ORL     A,#010H
005B FF                MOV     R7,A
005C 9043C2            MOV     DPTR,#043C2H
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
                                           ; SOURCE LINE # 439
0061 7B08              MOV     R3,#08H
0063 7A07              MOV     R2,#07H
0065 7928              MOV     R1,#028H
0067 C003              PUSH    AR3
0069 C002              PUSH    AR2
006B C001              PUSH    AR1
006D 7B00              MOV     R3,#00H
006F 7A51              MOV     R2,#051H
0071 7902              MOV     R1,#02H
0073 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0076 120000      E     LCALL   ?C?PSTXDATA
0079 D001              POP     AR1
007B D002              POP     AR2
007D D003              POP     AR3
007F 7F08              MOV     R7,#08H
0081 7E00              MOV     R6,#00H
0083 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 440
0086 7B08              MOV     R3,#08H
0088 7A07              MOV     R2,#07H
008A 7930              MOV     R1,#030H
008C C003              PUSH    AR3
008E C002              PUSH    AR2
0090 C001              PUSH    AR1
0092 7B00              MOV     R3,#00H
0094 7A51              MOV     R2,#051H
0096 79C2              MOV     R1,#0C2H
0098 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
009B 120000      E     LCALL   ?C?PSTXDATA
009E D001              POP     AR1
00A0 D002              POP     AR2
00A2 D003              POP     AR3
00A4 7F08              MOV     R7,#08H
00A6 7E00              MOV     R6,#00H
00A8 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 441
00AB 7B08              MOV     R3,#08H
00AD 7A07              MOV     R2,#07H
00AF 7938              MOV     R1,#038H
00B1 C003              PUSH    AR3
00B3 C002              PUSH    AR2
00B5 C001              PUSH    AR1
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 19  

00B7 7B00              MOV     R3,#00H
00B9 7A51              MOV     R2,#051H
00BB 79F2              MOV     R1,#0F2H
00BD 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00C0 120000      E     LCALL   ?C?PSTXDATA
00C3 D001              POP     AR1
00C5 D002              POP     AR2
00C7 D003              POP     AR3
00C9 7F08              MOV     R7,#08H
00CB 7E00              MOV     R6,#00H
00CD 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 442
00D0 7B08              MOV     R3,#08H
00D2 7A07              MOV     R2,#07H
00D4 7940              MOV     R1,#040H
00D6 C003              PUSH    AR3
00D8 C002              PUSH    AR2
00DA C001              PUSH    AR1
00DC 7B00              MOV     R3,#00H
00DE 7A51              MOV     R2,#051H
00E0 7932              MOV     R1,#032H
00E2 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
00E5 120000      E     LCALL   ?C?PSTXDATA
00E8 D001              POP     AR1
00EA D002              POP     AR2
00EC D003              POP     AR3
00EE 7F08              MOV     R7,#08H
00F0 7E00              MOV     R6,#00H
00F2 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 443
00F5 7B08              MOV     R3,#08H
00F7 7A07              MOV     R2,#07H
00F9 7948              MOV     R1,#048H
00FB C003              PUSH    AR3
00FD C002              PUSH    AR2
00FF C001              PUSH    AR1
0101 7B00              MOV     R3,#00H
0103 7A51              MOV     R2,#051H
0105 7942              MOV     R1,#042H
0107 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
010A 120000      E     LCALL   ?C?PSTXDATA
010D D001              POP     AR1
010F D002              POP     AR2
0111 D003              POP     AR3
0113 7F08              MOV     R7,#08H
0115 7E00              MOV     R6,#00H
0117 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 444
011A 7B08              MOV     R3,#08H
011C 7A07              MOV     R2,#07H
011E 7950              MOV     R1,#050H
0120 C003              PUSH    AR3
0122 C002              PUSH    AR2
0124 C001              PUSH    AR1
0126 7B00              MOV     R3,#00H
0128 7A51              MOV     R2,#051H
012A 7952              MOV     R1,#052H
012C 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
012F 120000      E     LCALL   ?C?PSTXDATA
0132 D001              POP     AR1
0134 D002              POP     AR2
0136 D003              POP     AR3
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 20  

0138 7F08              MOV     R7,#08H
013A 7E00              MOV     R6,#00H
013C 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 445
013F 9044F4            MOV     DPTR,#044F4H
0142 7401              MOV     A,#01H
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0145 904322            MOV     DPTR,#04322H
0148 E0                MOVX    A,@DPTR
0149 FF                MOV     R7,A
014A EF                MOV     A,R7
014B 4408              ORL     A,#08H
014D FF                MOV     R7,A
014E 904322            MOV     DPTR,#04322H
0151 EF                MOV     A,R7
0152 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0153 9046EC            MOV     DPTR,#046ECH
0156 E0                MOVX    A,@DPTR
0157 FF                MOV     R7,A
0158 EF                MOV     A,R7
0159 C3                CLR     C
015A 9405              SUBB    A,#05H
015C 5006              JNC     ?C0030
                                           ; SOURCE LINE # 450
                                           ; SOURCE LINE # 451
015E 904689            MOV     DPTR,#04689H
0161 743A              MOV     A,#03AH
0163 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 452
0164         ?C0030:
                                           ; SOURCE LINE # 456
0164 904800            MOV     DPTR,#04800H
0167 74F1              MOV     A,#0F1H
0169 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
016A 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 460
016D 904800            MOV     DPTR,#04800H
0170 74B1              MOV     A,#0B1H
0172 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 463
0173 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 466
0176 7B00              MOV     R3,#00H
0178 7A43              MOV     R2,#043H
017A 79A0              MOV     R1,#0A0H
017C C003              PUSH    AR3
017E C002              PUSH    AR2
0180 C001              PUSH    AR1
0182 7B00              MOV     R3,#00H
0184 7A43              MOV     R2,#043H
0186 79B0              MOV     R1,#0B0H
0188 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
018B 120000      E     LCALL   ?C?PSTXDATA
018E D001              POP     AR1
0190 D002              POP     AR2
0192 D003              POP     AR3
0194 7F0E              MOV     R7,#0EH
0196 7E00              MOV     R6,#00H
0198 120000      E     LCALL   _cyconfigcpy
C51 COMPILER V9.51   CYFITTER_CFG                                                          03/19/2014 18:23:33 PAGE 21  

                                           ; SOURCE LINE # 467
019B 9043B0            MOV     DPTR,#043B0H
019E E0                MOVX    A,@DPTR
019F FF                MOV     R7,A
01A0 EF                MOV     A,R7
01A1 54FD              ANL     A,#0FDH
01A3 FF                MOV     R7,A
01A4 EF                MOV     A,R7
01A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
01A6 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1042    ----
   CONSTANT SIZE    =    357    ----
   XDATA SIZE       =      4       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
